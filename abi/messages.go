package abi

// Code autogenerated. DO NOT EDIT.

import (
	"github.com/tonkeeper/tongo/boc"
	"github.com/tonkeeper/tongo/tlb"
)

func pointer[T any](t T) *T {
	return &t
}

var messagesDecodingFunctions = map[uint32]func(cell *boc.Cell) (*MsgOpName, any, error){
	// 0x00000000
	TextCommentMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTextCommentMsgBody TextCommentMsgBody
		err = tlb.Unmarshal(cell, &resTextCommentMsgBody)
		if err == nil {
			return pointer(TextCommentMsgOp), resTextCommentMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x04ded148
	ProveOwnershipMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resProveOwnershipMsgBody ProveOwnershipMsgBody
		err = tlb.Unmarshal(cell, &resProveOwnershipMsgBody)
		if err == nil {
			return pointer(ProveOwnershipMsgOp), resProveOwnershipMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x05138d91
	NftOwnershipAssignedMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resNftOwnershipAssignedMsgBody NftOwnershipAssignedMsgBody
		err = tlb.Unmarshal(cell, &resNftOwnershipAssignedMsgBody)
		if err == nil {
			return pointer(NftOwnershipAssignedMsgOp), resNftOwnershipAssignedMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x0524c7ae
	OwnershipProofMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resOwnershipProofMsgBody OwnershipProofMsgBody
		err = tlb.Unmarshal(cell, &resOwnershipProofMsgBody)
		if err == nil {
			return pointer(OwnershipProofMsgOp), resOwnershipProofMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x088eaa32
	ChallengeQuarantinedChannelStateMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resChallengeQuarantinedChannelStateMsgBody ChallengeQuarantinedChannelStateMsgBody
		err = tlb.Unmarshal(cell, &resChallengeQuarantinedChannelStateMsgBody)
		if err == nil {
			return pointer(ChallengeQuarantinedChannelStateMsgOp), resChallengeQuarantinedChannelStateMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x0a77535c
	TonstakePoolWithdrawalMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakePoolWithdrawalMsgBody TonstakePoolWithdrawalMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolWithdrawalMsgBody)
		if err == nil {
			return pointer(TonstakePoolWithdrawalMsgOp), resTonstakePoolWithdrawalMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x0dd607e3
	SbtOwnerInfoMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resSbtOwnerInfoMsgBody SbtOwnerInfoMsgBody
		err = tlb.Unmarshal(cell, &resSbtOwnerInfoMsgBody)
		if err == nil {
			return pointer(SbtOwnerInfoMsgOp), resSbtOwnerInfoMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x0e0620c2
	InitPaymentChannelMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resInitPaymentChannelMsgBody InitPaymentChannelMsgBody
		err = tlb.Unmarshal(cell, &resInitPaymentChannelMsgBody)
		if err == nil {
			return pointer(InitPaymentChannelMsgOp), resInitPaymentChannelMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x0f8a7ea5
	JettonTransferMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resJettonTransferMsgBody JettonTransferMsgBody
		err = tlb.Unmarshal(cell, &resJettonTransferMsgBody)
		if err == nil {
			return pointer(JettonTransferMsgOp), resJettonTransferMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x107c49ef
	OfferStorageContractMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resOfferStorageContractMsgBody OfferStorageContractMsgBody
		err = tlb.Unmarshal(cell, &resOfferStorageContractMsgBody)
		if err == nil {
			return pointer(OfferStorageContractMsgOp), resOfferStorageContractMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x132f9a45
	TonstakeNftInitMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeNftInitMsgBody TonstakeNftInitMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeNftInitMsgBody)
		if err == nil {
			return pointer(TonstakeNftInitMsgOp), resTonstakeNftInitMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x139a1b4e
	TonstakeControllerPoolHaltMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerPoolHaltMsgBody TonstakeControllerPoolHaltMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerPoolHaltMsgBody)
		if err == nil {
			return pointer(TonstakeControllerPoolHaltMsgOp), resTonstakeControllerPoolHaltMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x1596920c
	WhalesNominatorsForceKickMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resWhalesNominatorsForceKickMsgBody WhalesNominatorsForceKickMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsForceKickMsgBody)
		if err == nil {
			return pointer(WhalesNominatorsForceKickMsgOp), resWhalesNominatorsForceKickMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x1690c604
	TonstakeControllerCreditMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerCreditMsgBody TonstakeControllerCreditMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerCreditMsgBody)
		if err == nil {
			return pointer(TonstakeControllerCreditMsgOp), resTonstakeControllerCreditMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x178d4519
	JettonInternalTransferMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resJettonInternalTransferMsgBody JettonInternalTransferMsgBody
		err = tlb.Unmarshal(cell, &resJettonInternalTransferMsgBody)
		if err == nil {
			return pointer(JettonInternalTransferMsgOp), resJettonInternalTransferMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x1d1715bf
	WhalesNominatorsWithdrawUnownedResponseMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resWhalesNominatorsWithdrawUnownedResponseMsgBody WhalesNominatorsWithdrawUnownedResponseMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsWithdrawUnownedResponseMsgBody)
		if err == nil {
			return pointer(WhalesNominatorsWithdrawUnownedResponseMsgOp), resWhalesNominatorsWithdrawUnownedResponseMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x1f04537a
	SbtDestroyMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resSbtDestroyMsgBody SbtDestroyMsgBody
		err = tlb.Unmarshal(cell, &resSbtDestroyMsgBody)
		if err == nil {
			return pointer(SbtDestroyMsgOp), resSbtDestroyMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x1f151acf
	StartUncooperativeChannelCloseMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resStartUncooperativeChannelCloseMsgBody StartUncooperativeChannelCloseMsgBody
		err = tlb.Unmarshal(cell, &resStartUncooperativeChannelCloseMsgBody)
		if err == nil {
			return pointer(StartUncooperativeChannelCloseMsgOp), resStartUncooperativeChannelCloseMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x2167da4b
	EncryptedTextCommentMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resEncryptedTextCommentMsgBody EncryptedTextCommentMsgBody
		err = tlb.Unmarshal(cell, &resEncryptedTextCommentMsgBody)
		if err == nil {
			return pointer(EncryptedTextCommentMsgOp), resEncryptedTextCommentMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x23d421e1
	WhalesNominatorsStakeWithdrawCompletedMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resWhalesNominatorsStakeWithdrawCompletedMsgBody WhalesNominatorsStakeWithdrawCompletedMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsStakeWithdrawCompletedMsgBody)
		if err == nil && !completedRead(cell) {
			err = ErrStructSizeMismatch
		}
		if err == nil {
			return pointer(WhalesNominatorsStakeWithdrawCompletedMsgOp), resWhalesNominatorsStakeWithdrawCompletedMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x251d6a98
	WhalesNominatorsWithdrawUnownedMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resWhalesNominatorsWithdrawUnownedMsgBody WhalesNominatorsWithdrawUnownedMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsWithdrawUnownedMsgBody)
		if err == nil && !completedRead(cell) {
			err = ErrStructSizeMismatch
		}
		if err == nil {
			return pointer(WhalesNominatorsWithdrawUnownedMsgOp), resWhalesNominatorsWithdrawUnownedMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x25432a91
	FinishUncooperativeChannelCloseMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resFinishUncooperativeChannelCloseMsgBody FinishUncooperativeChannelCloseMsgBody
		err = tlb.Unmarshal(cell, &resFinishUncooperativeChannelCloseMsgBody)
		if err == nil {
			return pointer(FinishUncooperativeChannelCloseMsgOp), resFinishUncooperativeChannelCloseMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x25938561
	StonfiSwapMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resStonfiSwapMsgBody StonfiSwapMsgBody
		err = tlb.Unmarshal(cell, &resStonfiSwapMsgBody)
		if err == nil {
			return pointer(StonfiSwapMsgOp), resStonfiSwapMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x270695fb
	TonstakeControllerPoolSendMessageMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerPoolSendMessageMsgBody TonstakeControllerPoolSendMessageMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerPoolSendMessageMsgBody)
		if err == nil {
			return pointer(TonstakeControllerPoolSendMessageMsgOp), resTonstakeControllerPoolSendMessageMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x299a3e15
	TeleitemDeployMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTeleitemDeployMsgBody TeleitemDeployMsgBody
		err = tlb.Unmarshal(cell, &resTeleitemDeployMsgBody)
		if err == nil {
			return pointer(TeleitemDeployMsgOp), resTeleitemDeployMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x2aaa96a0
	TonstakePoolSetGovernanceFeeMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakePoolSetGovernanceFeeMsgBody TonstakePoolSetGovernanceFeeMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolSetGovernanceFeeMsgBody)
		if err == nil {
			return pointer(TonstakePoolSetGovernanceFeeMsgOp), resTonstakePoolSetGovernanceFeeMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x2fcb26a2
	GetStaticDataMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resGetStaticDataMsgBody GetStaticDataMsgBody
		err = tlb.Unmarshal(cell, &resGetStaticDataMsgBody)
		if err == nil {
			return pointer(GetStaticDataMsgOp), resGetStaticDataMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x30026327
	TonstakeControllerValidatorWithdrawalMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerValidatorWithdrawalMsgBody TonstakeControllerValidatorWithdrawalMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerValidatorWithdrawalMsgBody)
		if err == nil {
			return pointer(TonstakeControllerValidatorWithdrawalMsgOp), resTonstakeControllerValidatorWithdrawalMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x319b0cdc
	TonstakePoolWithdrawMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakePoolWithdrawMsgBody TonstakePoolWithdrawMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolWithdrawMsgBody)
		if err == nil {
			return pointer(TonstakePoolWithdrawMsgOp), resTonstakePoolWithdrawMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x370fec51
	AuctionFillUpMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resAuctionFillUpMsgBody AuctionFillUpMsgBody
		err = tlb.Unmarshal(cell, &resAuctionFillUpMsgBody)
		if err == nil {
			return pointer(AuctionFillUpMsgOp), resAuctionFillUpMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x371638ae
	TeleitemCancelAuctionMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTeleitemCancelAuctionMsgBody TeleitemCancelAuctionMsgBody
		err = tlb.Unmarshal(cell, &resTeleitemCancelAuctionMsgBody)
		if err == nil {
			return pointer(TeleitemCancelAuctionMsgOp), resTeleitemCancelAuctionMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x419d5d4d
	ProofStorageMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resProofStorageMsgBody ProofStorageMsgBody
		err = tlb.Unmarshal(cell, &resProofStorageMsgBody)
		if err == nil {
			return pointer(ProofStorageMsgOp), resProofStorageMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x44beae41
	ProcessGovernanceDecisionMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resProcessGovernanceDecisionMsgBody ProcessGovernanceDecisionMsgBody
		err = tlb.Unmarshal(cell, &resProcessGovernanceDecisionMsgBody)
		if err == nil {
			return pointer(ProcessGovernanceDecisionMsgOp), resProcessGovernanceDecisionMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x4637289a
	TelemintDeployMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTelemintDeployMsgBody TelemintDeployMsgBody
		err = tlb.Unmarshal(cell, &resTelemintDeployMsgBody)
		if err == nil {
			return pointer(TelemintDeployMsgOp), resTelemintDeployMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x4637289b
	TelemintDeployV2MsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTelemintDeployV2MsgBody TelemintDeployV2MsgBody
		err = tlb.Unmarshal(cell, &resTelemintDeployV2MsgBody)
		if err == nil {
			return pointer(TelemintDeployV2MsgOp), resTelemintDeployV2MsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x46ed2e94
	StorageWithdrawMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resStorageWithdrawMsgBody StorageWithdrawMsgBody
		err = tlb.Unmarshal(cell, &resStorageWithdrawMsgBody)
		if err == nil {
			return pointer(StorageWithdrawMsgOp), resStorageWithdrawMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x474f86cf
	DedustPayoutMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resDedustPayoutMsgBody DedustPayoutMsgBody
		err = tlb.Unmarshal(cell, &resDedustPayoutMsgBody)
		if err == nil {
			return pointer(DedustPayoutMsgOp), resDedustPayoutMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x47657424
	ElectorRecoverStakeRequestMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resElectorRecoverStakeRequestMsgBody ElectorRecoverStakeRequestMsgBody
		err = tlb.Unmarshal(cell, &resElectorRecoverStakeRequestMsgBody)
		if err == nil {
			return pointer(ElectorRecoverStakeRequestMsgOp), resElectorRecoverStakeRequestMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x47d54391
	TonstakePoolDepositMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakePoolDepositMsgBody TonstakePoolDepositMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolDepositMsgBody)
		if err == nil {
			return pointer(TonstakePoolDepositMsgOp), resTonstakePoolDepositMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x487a8e81
	TeleitemStartAuctionMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTeleitemStartAuctionMsgBody TeleitemStartAuctionMsgBody
		err = tlb.Unmarshal(cell, &resTeleitemStartAuctionMsgBody)
		if err == nil {
			return pointer(TeleitemStartAuctionMsgOp), resTeleitemStartAuctionMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x4bc7c2df
	TonstakePoolTouchMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakePoolTouchMsgBody TonstakePoolTouchMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolTouchMsgBody)
		if err == nil {
			return pointer(TonstakePoolTouchMsgOp), resTonstakePoolTouchMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x4e73744b
	ElectorNewStakeMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resElectorNewStakeMsgBody ElectorNewStakeMsgBody
		err = tlb.Unmarshal(cell, &resElectorNewStakeMsgBody)
		if err == nil {
			return pointer(ElectorNewStakeMsgOp), resElectorNewStakeMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	//DeleteDnsRecord, ChangeDnsRecord,
	0x4eb1f0f9: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		cell = cell.CopyRemaining()
		var resDeleteDnsRecordMsgBody DeleteDnsRecordMsgBody
		err = tlb.Unmarshal(cell, &resDeleteDnsRecordMsgBody)
		if err == nil && !completedRead(cell) {
			err = ErrStructSizeMismatch
		}
		if err == nil {
			return pointer(DeleteDnsRecordMsgOp), resDeleteDnsRecordMsgBody, nil
		}
		cell.ResetCounters()
		var resChangeDnsRecordMsgBody ChangeDnsRecordMsgBody
		err = tlb.Unmarshal(cell, &resChangeDnsRecordMsgBody)
		if err == nil {
			return pointer(ChangeDnsRecordMsgOp), resChangeDnsRecordMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x4ed14b65
	DnsBalanceReleaseMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resDnsBalanceReleaseMsgBody DnsBalanceReleaseMsgBody
		err = tlb.Unmarshal(cell, &resDnsBalanceReleaseMsgBody)
		if err == nil {
			return pointer(DnsBalanceReleaseMsgOp), resDnsBalanceReleaseMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x53f34cd6
	UpdatePubkeyMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resUpdatePubkeyMsgBody UpdatePubkeyMsgBody
		err = tlb.Unmarshal(cell, &resUpdatePubkeyMsgBody)
		if err == nil {
			return pointer(UpdatePubkeyMsgOp), resUpdatePubkeyMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x54cbf19b
	UpdateStorageParamsMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resUpdateStorageParamsMsgBody UpdateStorageParamsMsgBody
		err = tlb.Unmarshal(cell, &resUpdateStorageParamsMsgBody)
		if err == nil {
			return pointer(UpdateStorageParamsMsgOp), resUpdateStorageParamsMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x54d37487
	TonstakeImanagerOperationFeeMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeImanagerOperationFeeMsgBody TonstakeImanagerOperationFeeMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeImanagerOperationFeeMsgBody)
		if err == nil {
			return pointer(TonstakeImanagerOperationFeeMsgOp), resTonstakeImanagerOperationFeeMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x5577587e
	ChannelCooperativeCloseMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resChannelCooperativeCloseMsgBody ChannelCooperativeCloseMsgBody
		err = tlb.Unmarshal(cell, &resChannelCooperativeCloseMsgBody)
		if err == nil {
			return pointer(ChannelCooperativeCloseMsgOp), resChannelCooperativeCloseMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x557cea20
	OutbidNotificationMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resOutbidNotificationMsgBody OutbidNotificationMsgBody
		err = tlb.Unmarshal(cell, &resOutbidNotificationMsgBody)
		if err == nil {
			return pointer(OutbidNotificationMsgOp), resOutbidNotificationMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x55c26cd5
	TonstakeControllerReturnAvailableFundsMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerReturnAvailableFundsMsgBody TonstakeControllerReturnAvailableFundsMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerReturnAvailableFundsMsgBody)
		if err == nil {
			return pointer(TonstakeControllerReturnAvailableFundsMsgOp), resTonstakeControllerReturnAvailableFundsMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x595f07bc
	JettonBurnMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resJettonBurnMsgBody JettonBurnMsgBody
		err = tlb.Unmarshal(cell, &resJettonBurnMsgBody)
		if err == nil {
			return pointer(JettonBurnMsgOp), resJettonBurnMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x5e517f36
	TonstakePoolSetRolesMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakePoolSetRolesMsgBody TonstakePoolSetRolesMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolSetRolesMsgBody)
		if err == nil {
			return pointer(TonstakePoolSetRolesMsgOp), resTonstakePoolSetRolesMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x5fcc3d14
	NftTransferMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resNftTransferMsgBody NftTransferMsgBody
		err = tlb.Unmarshal(cell, &resNftTransferMsgBody)
		if err == nil {
			return pointer(NftTransferMsgOp), resNftTransferMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x600c00fd
	TegroSwapTonMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTegroSwapTonMsgBody TegroSwapTonMsgBody
		err = tlb.Unmarshal(cell, &resTegroSwapTonMsgBody)
		if err == nil {
			return pointer(TegroSwapTonMsgOp), resTegroSwapTonMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x61ee542d
	DedustSwapExternalMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resDedustSwapExternalMsgBody DedustSwapExternalMsgBody
		err = tlb.Unmarshal(cell, &resDedustSwapExternalMsgBody)
		if err == nil {
			return pointer(DedustSwapExternalMsgOp), resDedustSwapExternalMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x6335b11a
	TonstakeControllerSendRequestLoanMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerSendRequestLoanMsgBody TonstakeControllerSendRequestLoanMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerSendRequestLoanMsgBody)
		if err == nil {
			return pointer(TonstakeControllerSendRequestLoanMsgOp), resTonstakeControllerSendRequestLoanMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x64737472
	WalletPluginDestructMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resWalletPluginDestructMsgBody WalletPluginDestructMsgBody
		err = tlb.Unmarshal(cell, &resWalletPluginDestructMsgBody)
		if err == nil {
			return pointer(WalletPluginDestructMsgOp), resWalletPluginDestructMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x66f6f069
	SettleChannelConditionalsMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resSettleChannelConditionalsMsgBody SettleChannelConditionalsMsgBody
		err = tlb.Unmarshal(cell, &resSettleChannelConditionalsMsgBody)
		if err == nil {
			return pointer(SettleChannelConditionalsMsgOp), resSettleChannelConditionalsMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x67c7d281
	TopUpChannelBalanceMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTopUpChannelBalanceMsgBody TopUpChannelBalanceMsgBody
		err = tlb.Unmarshal(cell, &resTopUpChannelBalanceMsgBody)
		if err == nil {
			return pointer(TopUpChannelBalanceMsgOp), resTopUpChannelBalanceMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x693d3950
	GetRoyaltyParamsMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resGetRoyaltyParamsMsgBody GetRoyaltyParamsMsgBody
		err = tlb.Unmarshal(cell, &resGetRoyaltyParamsMsgBody)
		if err == nil {
			return pointer(GetRoyaltyParamsMsgOp), resGetRoyaltyParamsMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x6f89f5e3
	SbtRevokeMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resSbtRevokeMsgBody SbtRevokeMsgBody
		err = tlb.Unmarshal(cell, &resSbtRevokeMsgBody)
		if err == nil {
			return pointer(SbtRevokeMsgOp), resSbtRevokeMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x706c7567
	PaymentRequestMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resPaymentRequestMsgBody PaymentRequestMsgBody
		err = tlb.Unmarshal(cell, &resPaymentRequestMsgBody)
		if err == nil {
			return pointer(PaymentRequestMsgOp), resPaymentRequestMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x7247e7a5
	TonstakeControllerPoolUnhaltMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerPoolUnhaltMsgBody TonstakeControllerPoolUnhaltMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerPoolUnhaltMsgBody)
		if err == nil {
			return pointer(TonstakeControllerPoolUnhaltMsgOp), resTonstakeControllerPoolUnhaltMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x72aca8aa
	DedustSwapPeerMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resDedustSwapPeerMsgBody DedustSwapPeerMsgBody
		err = tlb.Unmarshal(cell, &resDedustSwapPeerMsgBody)
		if err == nil {
			return pointer(DedustSwapPeerMsgOp), resDedustSwapPeerMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x7362d09c
	JettonNotifyMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resJettonNotifyMsgBody JettonNotifyMsgBody
		err = tlb.Unmarshal(cell, &resJettonNotifyMsgBody)
		if err == nil {
			return pointer(JettonNotifyMsgOp), resJettonNotifyMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x73756273
	SubscriptionPaymentMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resSubscriptionPaymentMsgBody SubscriptionPaymentMsgBody
		err = tlb.Unmarshal(cell, &resSubscriptionPaymentMsgBody)
		if err == nil {
			return pointer(SubscriptionPaymentMsgOp), resSubscriptionPaymentMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x74bb3427
	WhalesNominatorsStakeWithdrawDelayedMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resWhalesNominatorsStakeWithdrawDelayedMsgBody WhalesNominatorsStakeWithdrawDelayedMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsStakeWithdrawDelayedMsgBody)
		if err == nil && !completedRead(cell) {
			err = ErrStructSizeMismatch
		}
		if err == nil {
			return pointer(WhalesNominatorsStakeWithdrawDelayedMsgOp), resWhalesNominatorsStakeWithdrawDelayedMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x77a33521
	MegatonWtonMintMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resMegatonWtonMintMsgBody MegatonWtonMintMsgBody
		err = tlb.Unmarshal(cell, &resMegatonWtonMintMsgBody)
		if err == nil {
			return pointer(MegatonWtonMintMsgOp), resMegatonWtonMintMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x79a126ef
	ChannelCooperativeCommitMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resChannelCooperativeCommitMsgBody ChannelCooperativeCommitMsgBody
		err = tlb.Unmarshal(cell, &resChannelCooperativeCommitMsgBody)
		if err == nil {
			return pointer(ChannelCooperativeCommitMsgOp), resChannelCooperativeCommitMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x79e7c016
	TonstakeControllerPoolSetSudoerMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerPoolSetSudoerMsgBody TonstakeControllerPoolSetSudoerMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerPoolSetSudoerMsgBody)
		if err == nil {
			return pointer(TonstakeControllerPoolSetSudoerMsgOp), resTonstakeControllerPoolSetSudoerMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x79f937ea
	CloseStorageContractMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resCloseStorageContractMsgBody CloseStorageContractMsgBody
		err = tlb.Unmarshal(cell, &resCloseStorageContractMsgBody)
		if err == nil {
			return pointer(CloseStorageContractMsgOp), resCloseStorageContractMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x7a361688
	AcceptStorageContractMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resAcceptStorageContractMsgBody AcceptStorageContractMsgBody
		err = tlb.Unmarshal(cell, &resAcceptStorageContractMsgBody)
		if err == nil {
			return pointer(AcceptStorageContractMsgOp), resAcceptStorageContractMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x7b4b42e6
	TonstakeControllerApproveMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerApproveMsgBody TonstakeControllerApproveMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerApproveMsgBody)
		if err == nil {
			return pointer(TonstakeControllerApproveMsgOp), resTonstakeControllerApproveMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x7bcd1fef
	WhalesNominatorsDepositMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resWhalesNominatorsDepositMsgBody WhalesNominatorsDepositMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsDepositMsgBody)
		if err == nil {
			return pointer(WhalesNominatorsDepositMsgOp), resWhalesNominatorsDepositMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x7bdd97de
	JettonBurnNotificationMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resJettonBurnNotificationMsgBody JettonBurnNotificationMsgBody
		err = tlb.Unmarshal(cell, &resJettonBurnNotificationMsgBody)
		if err == nil {
			return pointer(JettonBurnNotificationMsgOp), resJettonBurnNotificationMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x8b771735
	ReportStaticDataMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resReportStaticDataMsgBody ReportStaticDataMsgBody
		err = tlb.Unmarshal(cell, &resReportStaticDataMsgBody)
		if err == nil {
			return pointer(ReportStaticDataMsgOp), resReportStaticDataMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x8efed779
	TonstakeControllerWithdrawValidatorMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerWithdrawValidatorMsgBody TonstakeControllerWithdrawValidatorMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerWithdrawValidatorMsgBody)
		if err == nil {
			return pointer(TonstakeControllerWithdrawValidatorMsgOp), resTonstakeControllerWithdrawValidatorMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x96e7f528
	TonstakeControllerPoolUpgradeMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerPoolUpgradeMsgBody TonstakeControllerPoolUpgradeMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerPoolUpgradeMsgBody)
		if err == nil {
			return pointer(TonstakeControllerPoolUpgradeMsgOp), resTonstakeControllerPoolUpgradeMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x9971881c
	TonstakePoolPrepareGovernanceMigrationMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakePoolPrepareGovernanceMigrationMsgBody TonstakePoolPrepareGovernanceMigrationMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolPrepareGovernanceMigrationMsgBody)
		if err == nil {
			return pointer(TonstakePoolPrepareGovernanceMigrationMsgOp), resTonstakePoolPrepareGovernanceMigrationMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x99a811fb
	WhalesNominatorsAcceptStakeMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resWhalesNominatorsAcceptStakeMsgBody WhalesNominatorsAcceptStakeMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsAcceptStakeMsgBody)
		if err == nil {
			return pointer(WhalesNominatorsAcceptStakeMsgOp), resWhalesNominatorsAcceptStakeMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0x9bf5561c
	TonstakePoolSetDepositSettingsMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakePoolSetDepositSettingsMsgBody TonstakePoolSetDepositSettingsMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolSetDepositSettingsMsgBody)
		if err == nil {
			return pointer(TonstakePoolSetDepositSettingsMsgOp), resTonstakePoolSetDepositSettingsMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xa19fd934
	WhalesNominatorsAcceptWithdrawsMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resWhalesNominatorsAcceptWithdrawsMsgBody WhalesNominatorsAcceptWithdrawsMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsAcceptWithdrawsMsgBody)
		if err == nil {
			return pointer(WhalesNominatorsAcceptWithdrawsMsgOp), resWhalesNominatorsAcceptWithdrawsMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xa2065f2c
	WhalesNominatorsSendStakeMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resWhalesNominatorsSendStakeMsgBody WhalesNominatorsSendStakeMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsSendStakeMsgBody)
		if err == nil && !completedRead(cell) {
			err = ErrStructSizeMismatch
		}
		if err == nil {
			return pointer(WhalesNominatorsSendStakeMsgOp), resWhalesNominatorsSendStakeMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xa37a0983
	TeleitemOkMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTeleitemOkMsgBody TeleitemOkMsgBody
		err = tlb.Unmarshal(cell, &resTeleitemOkMsgBody)
		if err == nil {
			return pointer(TeleitemOkMsgOp), resTeleitemOkMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xa43227e1
	TeleitemReturnBidMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTeleitemReturnBidMsgBody TeleitemReturnBidMsgBody
		err = tlb.Unmarshal(cell, &resTeleitemReturnBidMsgBody)
		if err == nil {
			return pointer(TeleitemReturnBidMsgOp), resTeleitemReturnBidMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xa8cb00ad
	ReportRoyaltyParamsMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resReportRoyaltyParamsMsgBody ReportRoyaltyParamsMsgBody
		err = tlb.Unmarshal(cell, &resReportRoyaltyParamsMsgBody)
		if err == nil {
			return pointer(ReportRoyaltyParamsMsgOp), resReportRoyaltyParamsMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xa91baf56
	StorageRewardWithdrawalMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resStorageRewardWithdrawalMsgBody StorageRewardWithdrawalMsgBody
		err = tlb.Unmarshal(cell, &resStorageRewardWithdrawalMsgBody)
		if err == nil {
			return pointer(StorageRewardWithdrawalMsgOp), resStorageRewardWithdrawalMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xad4eb6f5
	DedustPayoutFromPoolMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resDedustPayoutFromPoolMsgBody DedustPayoutFromPoolMsgBody
		err = tlb.Unmarshal(cell, &resDedustPayoutFromPoolMsgBody)
		if err == nil {
			return pointer(DedustPayoutFromPoolMsgOp), resDedustPayoutFromPoolMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xb1ebae06
	TonstakeImanagerRequestNotificationMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeImanagerRequestNotificationMsgBody TonstakeImanagerRequestNotificationMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeImanagerRequestNotificationMsgBody)
		if err == nil {
			return pointer(TonstakeImanagerRequestNotificationMsgOp), resTonstakeImanagerRequestNotificationMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xb27edcad
	TonstakePoolDeployControllerMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakePoolDeployControllerMsgBody TonstakePoolDeployControllerMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolDeployControllerMsgBody)
		if err == nil {
			return pointer(TonstakePoolDeployControllerMsgOp), resTonstakePoolDeployControllerMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xb56b9598
	DedustDepositLiquidityAllMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resDedustDepositLiquidityAllMsgBody DedustDepositLiquidityAllMsgBody
		err = tlb.Unmarshal(cell, &resDedustDepositLiquidityAllMsgBody)
		if err == nil {
			return pointer(DedustDepositLiquidityAllMsgOp), resDedustDepositLiquidityAllMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xb6236d63
	StorageContractTerminatedMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resStorageContractTerminatedMsgBody StorageContractTerminatedMsgBody
		err = tlb.Unmarshal(cell, &resStorageContractTerminatedMsgBody)
		if err == nil {
			return pointer(StorageContractTerminatedMsgOp), resStorageContractTerminatedMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xc1344900
	TonstakeImanagerStatsMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeImanagerStatsMsgBody TonstakeImanagerStatsMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeImanagerStatsMsgBody)
		if err == nil {
			return pointer(TonstakeImanagerStatsMsgOp), resTonstakeImanagerStatsMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xc9f04485
	TonstakeImanagerSetInterestMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeImanagerSetInterestMsgBody TonstakeImanagerSetInterestMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeImanagerSetInterestMsgBody)
		if err == nil {
			return pointer(TonstakeImanagerSetInterestMsgOp), resTonstakeImanagerSetInterestMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xd0c3bfea
	SbtRequestOwnerMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resSbtRequestOwnerMsgBody SbtRequestOwnerMsgBody
		err = tlb.Unmarshal(cell, &resSbtRequestOwnerMsgBody)
		if err == nil {
			return pointer(SbtRequestOwnerMsgOp), resSbtRequestOwnerMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xd372158c
	TonstakeControllerTopUpMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerTopUpMsgBody TonstakeControllerTopUpMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerTopUpMsgBody)
		if err == nil {
			return pointer(TonstakeControllerTopUpMsgOp), resTonstakeControllerTopUpMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xd4caedcd
	StorageContractConfirmedMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resStorageContractConfirmedMsgBody StorageContractConfirmedMsgBody
		err = tlb.Unmarshal(cell, &resStorageContractConfirmedMsgBody)
		if err == nil {
			return pointer(StorageContractConfirmedMsgOp), resStorageContractConfirmedMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xd53276db
	ExcessMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resExcessMsgBody ExcessMsgBody
		err = tlb.Unmarshal(cell, &resExcessMsgBody)
		if err == nil {
			return pointer(ExcessMsgOp), resExcessMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xda803efd
	WhalesNominatorsWithdrawMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resWhalesNominatorsWithdrawMsgBody WhalesNominatorsWithdrawMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsWithdrawMsgBody)
		if err == nil {
			return pointer(WhalesNominatorsWithdrawMsgOp), resWhalesNominatorsWithdrawMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xdb3b8abd
	TonstakeNftPayoutMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeNftPayoutMsgBody TonstakeNftPayoutMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeNftPayoutMsgBody)
		if err == nil {
			return pointer(TonstakeNftPayoutMsgOp), resTonstakeNftPayoutMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xdddc88ba
	ChannelClosedMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resChannelClosedMsgBody ChannelClosedMsgBody
		err = tlb.Unmarshal(cell, &resChannelClosedMsgBody)
		if err == nil {
			return pointer(ChannelClosedMsgOp), resChannelClosedMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xdfdca27b
	TonstakePoolLoanRepaymentMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakePoolLoanRepaymentMsgBody TonstakePoolLoanRepaymentMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolLoanRepaymentMsgBody)
		if err == nil {
			return pointer(TonstakePoolLoanRepaymentMsgOp), resTonstakePoolLoanRepaymentMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xe4737472
	WalletPluginDestructResponseMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resWalletPluginDestructResponseMsgBody WalletPluginDestructResponseMsgBody
		err = tlb.Unmarshal(cell, &resWalletPluginDestructResponseMsgBody)
		if err == nil {
			return pointer(WalletPluginDestructResponseMsgOp), resWalletPluginDestructResponseMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xe4748df1
	DeployStorageContractMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resDeployStorageContractMsgBody DeployStorageContractMsgBody
		err = tlb.Unmarshal(cell, &resDeployStorageContractMsgBody)
		if err == nil {
			return pointer(DeployStorageContractMsgOp), resDeployStorageContractMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xe642c965
	TonstakePoolRequestLoanMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakePoolRequestLoanMsgBody TonstakePoolRequestLoanMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolRequestLoanMsgBody)
		if err == nil {
			return pointer(TonstakePoolRequestLoanMsgOp), resTonstakePoolRequestLoanMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xe8a0abfe
	TonstakeControllerDisapproveMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerDisapproveMsgBody TonstakeControllerDisapproveMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerDisapproveMsgBody)
		if err == nil {
			return pointer(TonstakeControllerDisapproveMsgOp), resTonstakeControllerDisapproveMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xea06185d
	DedustSwapMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resDedustSwapMsgBody DedustSwapMsgBody
		err = tlb.Unmarshal(cell, &resDedustSwapMsgBody)
		if err == nil {
			return pointer(DedustSwapMsgOp), resDedustSwapMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xeb373a05
	TonstakeControllerRecoverStakeMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerRecoverStakeMsgBody TonstakeControllerRecoverStakeMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerRecoverStakeMsgBody)
		if err == nil {
			return pointer(TonstakeControllerRecoverStakeMsgOp), resTonstakeControllerRecoverStakeMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xed58b0b2
	TonstakeNftBurnNotificationMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeNftBurnNotificationMsgBody TonstakeNftBurnNotificationMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeNftBurnNotificationMsgBody)
		if err == nil {
			return pointer(TonstakeNftBurnNotificationMsgOp), resTonstakeNftBurnNotificationMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xed7378a6
	TonstakeControllerReturnUnusedLoanMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerReturnUnusedLoanMsgBody TonstakeControllerReturnUnusedLoanMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerReturnUnusedLoanMsgBody)
		if err == nil {
			return pointer(TonstakeControllerReturnUnusedLoanMsgOp), resTonstakeControllerReturnUnusedLoanMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xf06c7567
	PaymentRequestResponseMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resPaymentRequestResponseMsgBody PaymentRequestResponseMsgBody
		err = tlb.Unmarshal(cell, &resPaymentRequestResponseMsgBody)
		if err == nil {
			return pointer(PaymentRequestResponseMsgOp), resPaymentRequestResponseMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xf0fd2250
	TonstakeControllerUpdateValidatorHashMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeControllerUpdateValidatorHashMsgBody TonstakeControllerUpdateValidatorHashMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerUpdateValidatorHashMsgBody)
		if err == nil {
			return pointer(TonstakeControllerUpdateValidatorHashMsgOp), resTonstakeControllerUpdateValidatorHashMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xf127fe4e
	TonstakeNftBurnMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resTonstakeNftBurnMsgBody TonstakeNftBurnMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeNftBurnMsgBody)
		if err == nil {
			return pointer(TonstakeNftBurnMsgOp), resTonstakeNftBurnMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xf374484c
	ElectorNewStakeConfirmationMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resElectorNewStakeConfirmationMsgBody ElectorNewStakeConfirmationMsgBody
		err = tlb.Unmarshal(cell, &resElectorNewStakeConfirmationMsgBody)
		if err == nil {
			return pointer(ElectorNewStakeConfirmationMsgOp), resElectorNewStakeConfirmationMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xf93bb43f
	StonfiPaymentRequestMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resStonfiPaymentRequestMsgBody StonfiPaymentRequestMsgBody
		err = tlb.Unmarshal(cell, &resStonfiPaymentRequestMsgBody)
		if err == nil && !completedRead(cell) {
			err = ErrStructSizeMismatch
		}
		if err == nil {
			return pointer(StonfiPaymentRequestMsgOp), resStonfiPaymentRequestMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xf96f7324
	ElectorRecoverStakeResponseMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resElectorRecoverStakeResponseMsgBody ElectorRecoverStakeResponseMsgBody
		err = tlb.Unmarshal(cell, &resElectorRecoverStakeResponseMsgBody)
		if err == nil {
			return pointer(ElectorRecoverStakeResponseMsgOp), resElectorRecoverStakeResponseMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
	// 0xffffffff
	BounceMsgOpCode: func(cell *boc.Cell) (*MsgOpName, any, error) {
		var err error
		var resBounceMsgBody BounceMsgBody
		err = tlb.Unmarshal(cell, &resBounceMsgBody)
		if err == nil {
			return pointer(BounceMsgOp), resBounceMsgBody, nil
		}
		cell.ResetCounters()
		return nil, nil, err
	},
}

// MessageDecoder takes in a message body as a cell and tries to decode it based on the first 4 bytes.
// It returns an opcode, an operation name and a decoded body.
func InternalMessageDecoder(cell *boc.Cell, interfaces []ContractInterface) (*uint32, *MsgOpName, any, error) {
	if cell.BitsAvailableForRead() < 32 {
		return nil, nil, nil, nil
	}
	tag64, err := cell.ReadUint(32)
	if err != nil {
		return nil, nil, nil, err
	}
	tag := uint32(tag64)
	f := messagesDecodingFunctions[tag]
	if f != nil {
		name, a, err := f(cell)
		return &tag, name, a, err
	}
	return &tag, nil, nil, nil
}

func completedRead(cell *boc.Cell) bool {
	return cell.RefsAvailableForRead() == 0 && cell.BitsAvailableForRead() == 0
}

// MsgOpName is a human-friendly name for a message's operation which is identified by the first 4 bytes of the message's body.
type MsgOpName = string

const (
	TextCommentMsgOp                             MsgOpName = "TextComment"
	ProveOwnershipMsgOp                          MsgOpName = "ProveOwnership"
	NftOwnershipAssignedMsgOp                    MsgOpName = "NftOwnershipAssigned"
	OwnershipProofMsgOp                          MsgOpName = "OwnershipProof"
	ChallengeQuarantinedChannelStateMsgOp        MsgOpName = "ChallengeQuarantinedChannelState"
	TonstakePoolWithdrawalMsgOp                  MsgOpName = "TonstakePoolWithdrawal"
	SbtOwnerInfoMsgOp                            MsgOpName = "SbtOwnerInfo"
	InitPaymentChannelMsgOp                      MsgOpName = "InitPaymentChannel"
	JettonTransferMsgOp                          MsgOpName = "JettonTransfer"
	OfferStorageContractMsgOp                    MsgOpName = "OfferStorageContract"
	TonstakeNftInitMsgOp                         MsgOpName = "TonstakeNftInit"
	TonstakeControllerPoolHaltMsgOp              MsgOpName = "TonstakeControllerPoolHalt"
	WhalesNominatorsForceKickMsgOp               MsgOpName = "WhalesNominatorsForceKick"
	TonstakeControllerCreditMsgOp                MsgOpName = "TonstakeControllerCredit"
	JettonInternalTransferMsgOp                  MsgOpName = "JettonInternalTransfer"
	WhalesNominatorsWithdrawUnownedResponseMsgOp MsgOpName = "WhalesNominatorsWithdrawUnownedResponse"
	SbtDestroyMsgOp                              MsgOpName = "SbtDestroy"
	StartUncooperativeChannelCloseMsgOp          MsgOpName = "StartUncooperativeChannelClose"
	EncryptedTextCommentMsgOp                    MsgOpName = "EncryptedTextComment"
	WhalesNominatorsStakeWithdrawCompletedMsgOp  MsgOpName = "WhalesNominatorsStakeWithdrawCompleted"
	WhalesNominatorsWithdrawUnownedMsgOp         MsgOpName = "WhalesNominatorsWithdrawUnowned"
	FinishUncooperativeChannelCloseMsgOp         MsgOpName = "FinishUncooperativeChannelClose"
	StonfiSwapMsgOp                              MsgOpName = "StonfiSwap"
	TonstakeControllerPoolSendMessageMsgOp       MsgOpName = "TonstakeControllerPoolSendMessage"
	TeleitemDeployMsgOp                          MsgOpName = "TeleitemDeploy"
	TonstakePoolSetGovernanceFeeMsgOp            MsgOpName = "TonstakePoolSetGovernanceFee"
	GetStaticDataMsgOp                           MsgOpName = "GetStaticData"
	TonstakeControllerValidatorWithdrawalMsgOp   MsgOpName = "TonstakeControllerValidatorWithdrawal"
	TonstakePoolWithdrawMsgOp                    MsgOpName = "TonstakePoolWithdraw"
	AuctionFillUpMsgOp                           MsgOpName = "AuctionFillUp"
	TeleitemCancelAuctionMsgOp                   MsgOpName = "TeleitemCancelAuction"
	ProofStorageMsgOp                            MsgOpName = "ProofStorage"
	ProcessGovernanceDecisionMsgOp               MsgOpName = "ProcessGovernanceDecision"
	TelemintDeployMsgOp                          MsgOpName = "TelemintDeploy"
	TelemintDeployV2MsgOp                        MsgOpName = "TelemintDeployV2"
	StorageWithdrawMsgOp                         MsgOpName = "StorageWithdraw"
	DedustPayoutMsgOp                            MsgOpName = "DedustPayout"
	ElectorRecoverStakeRequestMsgOp              MsgOpName = "ElectorRecoverStakeRequest"
	TonstakePoolDepositMsgOp                     MsgOpName = "TonstakePoolDeposit"
	TeleitemStartAuctionMsgOp                    MsgOpName = "TeleitemStartAuction"
	TonstakePoolTouchMsgOp                       MsgOpName = "TonstakePoolTouch"
	ElectorNewStakeMsgOp                         MsgOpName = "ElectorNewStake"
	DeleteDnsRecordMsgOp                         MsgOpName = "DeleteDnsRecord"
	ChangeDnsRecordMsgOp                         MsgOpName = "ChangeDnsRecord"
	DnsBalanceReleaseMsgOp                       MsgOpName = "DnsBalanceRelease"
	UpdatePubkeyMsgOp                            MsgOpName = "UpdatePubkey"
	UpdateStorageParamsMsgOp                     MsgOpName = "UpdateStorageParams"
	TonstakeImanagerOperationFeeMsgOp            MsgOpName = "TonstakeImanagerOperationFee"
	ChannelCooperativeCloseMsgOp                 MsgOpName = "ChannelCooperativeClose"
	OutbidNotificationMsgOp                      MsgOpName = "OutbidNotification"
	TonstakeControllerReturnAvailableFundsMsgOp  MsgOpName = "TonstakeControllerReturnAvailableFunds"
	JettonBurnMsgOp                              MsgOpName = "JettonBurn"
	TonstakePoolSetRolesMsgOp                    MsgOpName = "TonstakePoolSetRoles"
	NftTransferMsgOp                             MsgOpName = "NftTransfer"
	TegroSwapTonMsgOp                            MsgOpName = "TegroSwapTon"
	DedustSwapExternalMsgOp                      MsgOpName = "DedustSwapExternal"
	TonstakeControllerSendRequestLoanMsgOp       MsgOpName = "TonstakeControllerSendRequestLoan"
	WalletPluginDestructMsgOp                    MsgOpName = "WalletPluginDestruct"
	SettleChannelConditionalsMsgOp               MsgOpName = "SettleChannelConditionals"
	TopUpChannelBalanceMsgOp                     MsgOpName = "TopUpChannelBalance"
	GetRoyaltyParamsMsgOp                        MsgOpName = "GetRoyaltyParams"
	SbtRevokeMsgOp                               MsgOpName = "SbtRevoke"
	PaymentRequestMsgOp                          MsgOpName = "PaymentRequest"
	TonstakeControllerPoolUnhaltMsgOp            MsgOpName = "TonstakeControllerPoolUnhalt"
	DedustSwapPeerMsgOp                          MsgOpName = "DedustSwapPeer"
	JettonNotifyMsgOp                            MsgOpName = "JettonNotify"
	SubscriptionPaymentMsgOp                     MsgOpName = "SubscriptionPayment"
	WhalesNominatorsStakeWithdrawDelayedMsgOp    MsgOpName = "WhalesNominatorsStakeWithdrawDelayed"
	MegatonWtonMintMsgOp                         MsgOpName = "MegatonWtonMint"
	ChannelCooperativeCommitMsgOp                MsgOpName = "ChannelCooperativeCommit"
	TonstakeControllerPoolSetSudoerMsgOp         MsgOpName = "TonstakeControllerPoolSetSudoer"
	CloseStorageContractMsgOp                    MsgOpName = "CloseStorageContract"
	AcceptStorageContractMsgOp                   MsgOpName = "AcceptStorageContract"
	TonstakeControllerApproveMsgOp               MsgOpName = "TonstakeControllerApprove"
	WhalesNominatorsDepositMsgOp                 MsgOpName = "WhalesNominatorsDeposit"
	JettonBurnNotificationMsgOp                  MsgOpName = "JettonBurnNotification"
	ReportStaticDataMsgOp                        MsgOpName = "ReportStaticData"
	TonstakeControllerWithdrawValidatorMsgOp     MsgOpName = "TonstakeControllerWithdrawValidator"
	TonstakeControllerPoolUpgradeMsgOp           MsgOpName = "TonstakeControllerPoolUpgrade"
	TonstakePoolPrepareGovernanceMigrationMsgOp  MsgOpName = "TonstakePoolPrepareGovernanceMigration"
	WhalesNominatorsAcceptStakeMsgOp             MsgOpName = "WhalesNominatorsAcceptStake"
	TonstakePoolSetDepositSettingsMsgOp          MsgOpName = "TonstakePoolSetDepositSettings"
	WhalesNominatorsAcceptWithdrawsMsgOp         MsgOpName = "WhalesNominatorsAcceptWithdraws"
	WhalesNominatorsSendStakeMsgOp               MsgOpName = "WhalesNominatorsSendStake"
	TeleitemOkMsgOp                              MsgOpName = "TeleitemOk"
	TeleitemReturnBidMsgOp                       MsgOpName = "TeleitemReturnBid"
	ReportRoyaltyParamsMsgOp                     MsgOpName = "ReportRoyaltyParams"
	StorageRewardWithdrawalMsgOp                 MsgOpName = "StorageRewardWithdrawal"
	DedustPayoutFromPoolMsgOp                    MsgOpName = "DedustPayoutFromPool"
	TonstakeImanagerRequestNotificationMsgOp     MsgOpName = "TonstakeImanagerRequestNotification"
	TonstakePoolDeployControllerMsgOp            MsgOpName = "TonstakePoolDeployController"
	DedustDepositLiquidityAllMsgOp               MsgOpName = "DedustDepositLiquidityAll"
	StorageContractTerminatedMsgOp               MsgOpName = "StorageContractTerminated"
	TonstakeImanagerStatsMsgOp                   MsgOpName = "TonstakeImanagerStats"
	TonstakeImanagerSetInterestMsgOp             MsgOpName = "TonstakeImanagerSetInterest"
	SbtRequestOwnerMsgOp                         MsgOpName = "SbtRequestOwner"
	TonstakeControllerTopUpMsgOp                 MsgOpName = "TonstakeControllerTopUp"
	StorageContractConfirmedMsgOp                MsgOpName = "StorageContractConfirmed"
	ExcessMsgOp                                  MsgOpName = "Excess"
	WhalesNominatorsWithdrawMsgOp                MsgOpName = "WhalesNominatorsWithdraw"
	TonstakeNftPayoutMsgOp                       MsgOpName = "TonstakeNftPayout"
	ChannelClosedMsgOp                           MsgOpName = "ChannelClosed"
	TonstakePoolLoanRepaymentMsgOp               MsgOpName = "TonstakePoolLoanRepayment"
	WalletPluginDestructResponseMsgOp            MsgOpName = "WalletPluginDestructResponse"
	DeployStorageContractMsgOp                   MsgOpName = "DeployStorageContract"
	TonstakePoolRequestLoanMsgOp                 MsgOpName = "TonstakePoolRequestLoan"
	TonstakeControllerDisapproveMsgOp            MsgOpName = "TonstakeControllerDisapprove"
	DedustSwapMsgOp                              MsgOpName = "DedustSwap"
	TonstakeControllerRecoverStakeMsgOp          MsgOpName = "TonstakeControllerRecoverStake"
	TonstakeNftBurnNotificationMsgOp             MsgOpName = "TonstakeNftBurnNotification"
	TonstakeControllerReturnUnusedLoanMsgOp      MsgOpName = "TonstakeControllerReturnUnusedLoan"
	PaymentRequestResponseMsgOp                  MsgOpName = "PaymentRequestResponse"
	TonstakeControllerUpdateValidatorHashMsgOp   MsgOpName = "TonstakeControllerUpdateValidatorHash"
	TonstakeNftBurnMsgOp                         MsgOpName = "TonstakeNftBurn"
	ElectorNewStakeConfirmationMsgOp             MsgOpName = "ElectorNewStakeConfirmation"
	StonfiPaymentRequestMsgOp                    MsgOpName = "StonfiPaymentRequest"
	ElectorRecoverStakeResponseMsgOp             MsgOpName = "ElectorRecoverStakeResponse"
	BounceMsgOp                                  MsgOpName = "Bounce"
)

// MsgOpCode is the first 4 bytes of a message body identifying an operation to be performed.
type MsgOpCode = uint32

const (
	TextCommentMsgOpCode                             MsgOpCode = 0x00000000
	ProveOwnershipMsgOpCode                          MsgOpCode = 0x04ded148
	NftOwnershipAssignedMsgOpCode                    MsgOpCode = 0x05138d91
	OwnershipProofMsgOpCode                          MsgOpCode = 0x0524c7ae
	ChallengeQuarantinedChannelStateMsgOpCode        MsgOpCode = 0x088eaa32
	TonstakePoolWithdrawalMsgOpCode                  MsgOpCode = 0x0a77535c
	SbtOwnerInfoMsgOpCode                            MsgOpCode = 0x0dd607e3
	InitPaymentChannelMsgOpCode                      MsgOpCode = 0x0e0620c2
	JettonTransferMsgOpCode                          MsgOpCode = 0x0f8a7ea5
	OfferStorageContractMsgOpCode                    MsgOpCode = 0x107c49ef
	TonstakeNftInitMsgOpCode                         MsgOpCode = 0x132f9a45
	TonstakeControllerPoolHaltMsgOpCode              MsgOpCode = 0x139a1b4e
	WhalesNominatorsForceKickMsgOpCode               MsgOpCode = 0x1596920c
	TonstakeControllerCreditMsgOpCode                MsgOpCode = 0x1690c604
	JettonInternalTransferMsgOpCode                  MsgOpCode = 0x178d4519
	WhalesNominatorsWithdrawUnownedResponseMsgOpCode MsgOpCode = 0x1d1715bf
	SbtDestroyMsgOpCode                              MsgOpCode = 0x1f04537a
	StartUncooperativeChannelCloseMsgOpCode          MsgOpCode = 0x1f151acf
	EncryptedTextCommentMsgOpCode                    MsgOpCode = 0x2167da4b
	WhalesNominatorsStakeWithdrawCompletedMsgOpCode  MsgOpCode = 0x23d421e1
	WhalesNominatorsWithdrawUnownedMsgOpCode         MsgOpCode = 0x251d6a98
	FinishUncooperativeChannelCloseMsgOpCode         MsgOpCode = 0x25432a91
	StonfiSwapMsgOpCode                              MsgOpCode = 0x25938561
	TonstakeControllerPoolSendMessageMsgOpCode       MsgOpCode = 0x270695fb
	TeleitemDeployMsgOpCode                          MsgOpCode = 0x299a3e15
	TonstakePoolSetGovernanceFeeMsgOpCode            MsgOpCode = 0x2aaa96a0
	GetStaticDataMsgOpCode                           MsgOpCode = 0x2fcb26a2
	TonstakeControllerValidatorWithdrawalMsgOpCode   MsgOpCode = 0x30026327
	TonstakePoolWithdrawMsgOpCode                    MsgOpCode = 0x319b0cdc
	AuctionFillUpMsgOpCode                           MsgOpCode = 0x370fec51
	TeleitemCancelAuctionMsgOpCode                   MsgOpCode = 0x371638ae
	ProofStorageMsgOpCode                            MsgOpCode = 0x419d5d4d
	ProcessGovernanceDecisionMsgOpCode               MsgOpCode = 0x44beae41
	TelemintDeployMsgOpCode                          MsgOpCode = 0x4637289a
	TelemintDeployV2MsgOpCode                        MsgOpCode = 0x4637289b
	StorageWithdrawMsgOpCode                         MsgOpCode = 0x46ed2e94
	DedustPayoutMsgOpCode                            MsgOpCode = 0x474f86cf
	ElectorRecoverStakeRequestMsgOpCode              MsgOpCode = 0x47657424
	TonstakePoolDepositMsgOpCode                     MsgOpCode = 0x47d54391
	TeleitemStartAuctionMsgOpCode                    MsgOpCode = 0x487a8e81
	TonstakePoolTouchMsgOpCode                       MsgOpCode = 0x4bc7c2df
	ElectorNewStakeMsgOpCode                         MsgOpCode = 0x4e73744b
	DeleteDnsRecordMsgOpCode                         MsgOpCode = 0x4eb1f0f9
	ChangeDnsRecordMsgOpCode                         MsgOpCode = 0x4eb1f0f9
	DnsBalanceReleaseMsgOpCode                       MsgOpCode = 0x4ed14b65
	UpdatePubkeyMsgOpCode                            MsgOpCode = 0x53f34cd6
	UpdateStorageParamsMsgOpCode                     MsgOpCode = 0x54cbf19b
	TonstakeImanagerOperationFeeMsgOpCode            MsgOpCode = 0x54d37487
	ChannelCooperativeCloseMsgOpCode                 MsgOpCode = 0x5577587e
	OutbidNotificationMsgOpCode                      MsgOpCode = 0x557cea20
	TonstakeControllerReturnAvailableFundsMsgOpCode  MsgOpCode = 0x55c26cd5
	JettonBurnMsgOpCode                              MsgOpCode = 0x595f07bc
	TonstakePoolSetRolesMsgOpCode                    MsgOpCode = 0x5e517f36
	NftTransferMsgOpCode                             MsgOpCode = 0x5fcc3d14
	TegroSwapTonMsgOpCode                            MsgOpCode = 0x600c00fd
	DedustSwapExternalMsgOpCode                      MsgOpCode = 0x61ee542d
	TonstakeControllerSendRequestLoanMsgOpCode       MsgOpCode = 0x6335b11a
	WalletPluginDestructMsgOpCode                    MsgOpCode = 0x64737472
	SettleChannelConditionalsMsgOpCode               MsgOpCode = 0x66f6f069
	TopUpChannelBalanceMsgOpCode                     MsgOpCode = 0x67c7d281
	GetRoyaltyParamsMsgOpCode                        MsgOpCode = 0x693d3950
	SbtRevokeMsgOpCode                               MsgOpCode = 0x6f89f5e3
	PaymentRequestMsgOpCode                          MsgOpCode = 0x706c7567
	TonstakeControllerPoolUnhaltMsgOpCode            MsgOpCode = 0x7247e7a5
	DedustSwapPeerMsgOpCode                          MsgOpCode = 0x72aca8aa
	JettonNotifyMsgOpCode                            MsgOpCode = 0x7362d09c
	SubscriptionPaymentMsgOpCode                     MsgOpCode = 0x73756273
	WhalesNominatorsStakeWithdrawDelayedMsgOpCode    MsgOpCode = 0x74bb3427
	MegatonWtonMintMsgOpCode                         MsgOpCode = 0x77a33521
	ChannelCooperativeCommitMsgOpCode                MsgOpCode = 0x79a126ef
	TonstakeControllerPoolSetSudoerMsgOpCode         MsgOpCode = 0x79e7c016
	CloseStorageContractMsgOpCode                    MsgOpCode = 0x79f937ea
	AcceptStorageContractMsgOpCode                   MsgOpCode = 0x7a361688
	TonstakeControllerApproveMsgOpCode               MsgOpCode = 0x7b4b42e6
	WhalesNominatorsDepositMsgOpCode                 MsgOpCode = 0x7bcd1fef
	JettonBurnNotificationMsgOpCode                  MsgOpCode = 0x7bdd97de
	ReportStaticDataMsgOpCode                        MsgOpCode = 0x8b771735
	TonstakeControllerWithdrawValidatorMsgOpCode     MsgOpCode = 0x8efed779
	TonstakeControllerPoolUpgradeMsgOpCode           MsgOpCode = 0x96e7f528
	TonstakePoolPrepareGovernanceMigrationMsgOpCode  MsgOpCode = 0x9971881c
	WhalesNominatorsAcceptStakeMsgOpCode             MsgOpCode = 0x99a811fb
	TonstakePoolSetDepositSettingsMsgOpCode          MsgOpCode = 0x9bf5561c
	WhalesNominatorsAcceptWithdrawsMsgOpCode         MsgOpCode = 0xa19fd934
	WhalesNominatorsSendStakeMsgOpCode               MsgOpCode = 0xa2065f2c
	TeleitemOkMsgOpCode                              MsgOpCode = 0xa37a0983
	TeleitemReturnBidMsgOpCode                       MsgOpCode = 0xa43227e1
	ReportRoyaltyParamsMsgOpCode                     MsgOpCode = 0xa8cb00ad
	StorageRewardWithdrawalMsgOpCode                 MsgOpCode = 0xa91baf56
	DedustPayoutFromPoolMsgOpCode                    MsgOpCode = 0xad4eb6f5
	TonstakeImanagerRequestNotificationMsgOpCode     MsgOpCode = 0xb1ebae06
	TonstakePoolDeployControllerMsgOpCode            MsgOpCode = 0xb27edcad
	DedustDepositLiquidityAllMsgOpCode               MsgOpCode = 0xb56b9598
	StorageContractTerminatedMsgOpCode               MsgOpCode = 0xb6236d63
	TonstakeImanagerStatsMsgOpCode                   MsgOpCode = 0xc1344900
	TonstakeImanagerSetInterestMsgOpCode             MsgOpCode = 0xc9f04485
	SbtRequestOwnerMsgOpCode                         MsgOpCode = 0xd0c3bfea
	TonstakeControllerTopUpMsgOpCode                 MsgOpCode = 0xd372158c
	StorageContractConfirmedMsgOpCode                MsgOpCode = 0xd4caedcd
	ExcessMsgOpCode                                  MsgOpCode = 0xd53276db
	WhalesNominatorsWithdrawMsgOpCode                MsgOpCode = 0xda803efd
	TonstakeNftPayoutMsgOpCode                       MsgOpCode = 0xdb3b8abd
	ChannelClosedMsgOpCode                           MsgOpCode = 0xdddc88ba
	TonstakePoolLoanRepaymentMsgOpCode               MsgOpCode = 0xdfdca27b
	WalletPluginDestructResponseMsgOpCode            MsgOpCode = 0xe4737472
	DeployStorageContractMsgOpCode                   MsgOpCode = 0xe4748df1
	TonstakePoolRequestLoanMsgOpCode                 MsgOpCode = 0xe642c965
	TonstakeControllerDisapproveMsgOpCode            MsgOpCode = 0xe8a0abfe
	DedustSwapMsgOpCode                              MsgOpCode = 0xea06185d
	TonstakeControllerRecoverStakeMsgOpCode          MsgOpCode = 0xeb373a05
	TonstakeNftBurnNotificationMsgOpCode             MsgOpCode = 0xed58b0b2
	TonstakeControllerReturnUnusedLoanMsgOpCode      MsgOpCode = 0xed7378a6
	PaymentRequestResponseMsgOpCode                  MsgOpCode = 0xf06c7567
	TonstakeControllerUpdateValidatorHashMsgOpCode   MsgOpCode = 0xf0fd2250
	TonstakeNftBurnMsgOpCode                         MsgOpCode = 0xf127fe4e
	ElectorNewStakeConfirmationMsgOpCode             MsgOpCode = 0xf374484c
	StonfiPaymentRequestMsgOpCode                    MsgOpCode = 0xf93bb43f
	ElectorRecoverStakeResponseMsgOpCode             MsgOpCode = 0xf96f7324
	BounceMsgOpCode                                  MsgOpCode = 0xffffffff
)

var KnownMsgTypes = map[string]any{
	TextCommentMsgOp:                             TextCommentMsgBody{},
	ProveOwnershipMsgOp:                          ProveOwnershipMsgBody{},
	NftOwnershipAssignedMsgOp:                    NftOwnershipAssignedMsgBody{},
	OwnershipProofMsgOp:                          OwnershipProofMsgBody{},
	ChallengeQuarantinedChannelStateMsgOp:        ChallengeQuarantinedChannelStateMsgBody{},
	TonstakePoolWithdrawalMsgOp:                  TonstakePoolWithdrawalMsgBody{},
	SbtOwnerInfoMsgOp:                            SbtOwnerInfoMsgBody{},
	InitPaymentChannelMsgOp:                      InitPaymentChannelMsgBody{},
	JettonTransferMsgOp:                          JettonTransferMsgBody{},
	OfferStorageContractMsgOp:                    OfferStorageContractMsgBody{},
	TonstakeNftInitMsgOp:                         TonstakeNftInitMsgBody{},
	TonstakeControllerPoolHaltMsgOp:              TonstakeControllerPoolHaltMsgBody{},
	WhalesNominatorsForceKickMsgOp:               WhalesNominatorsForceKickMsgBody{},
	TonstakeControllerCreditMsgOp:                TonstakeControllerCreditMsgBody{},
	JettonInternalTransferMsgOp:                  JettonInternalTransferMsgBody{},
	WhalesNominatorsWithdrawUnownedResponseMsgOp: WhalesNominatorsWithdrawUnownedResponseMsgBody{},
	SbtDestroyMsgOp:                              SbtDestroyMsgBody{},
	StartUncooperativeChannelCloseMsgOp:          StartUncooperativeChannelCloseMsgBody{},
	EncryptedTextCommentMsgOp:                    EncryptedTextCommentMsgBody{},
	WhalesNominatorsStakeWithdrawCompletedMsgOp:  WhalesNominatorsStakeWithdrawCompletedMsgBody{},
	WhalesNominatorsWithdrawUnownedMsgOp:         WhalesNominatorsWithdrawUnownedMsgBody{},
	FinishUncooperativeChannelCloseMsgOp:         FinishUncooperativeChannelCloseMsgBody{},
	StonfiSwapMsgOp:                              StonfiSwapMsgBody{},
	TonstakeControllerPoolSendMessageMsgOp:       TonstakeControllerPoolSendMessageMsgBody{},
	TeleitemDeployMsgOp:                          TeleitemDeployMsgBody{},
	TonstakePoolSetGovernanceFeeMsgOp:            TonstakePoolSetGovernanceFeeMsgBody{},
	GetStaticDataMsgOp:                           GetStaticDataMsgBody{},
	TonstakeControllerValidatorWithdrawalMsgOp:   TonstakeControllerValidatorWithdrawalMsgBody{},
	TonstakePoolWithdrawMsgOp:                    TonstakePoolWithdrawMsgBody{},
	AuctionFillUpMsgOp:                           AuctionFillUpMsgBody{},
	TeleitemCancelAuctionMsgOp:                   TeleitemCancelAuctionMsgBody{},
	ProofStorageMsgOp:                            ProofStorageMsgBody{},
	ProcessGovernanceDecisionMsgOp:               ProcessGovernanceDecisionMsgBody{},
	TelemintDeployMsgOp:                          TelemintDeployMsgBody{},
	TelemintDeployV2MsgOp:                        TelemintDeployV2MsgBody{},
	StorageWithdrawMsgOp:                         StorageWithdrawMsgBody{},
	DedustPayoutMsgOp:                            DedustPayoutMsgBody{},
	ElectorRecoverStakeRequestMsgOp:              ElectorRecoverStakeRequestMsgBody{},
	TonstakePoolDepositMsgOp:                     TonstakePoolDepositMsgBody{},
	TeleitemStartAuctionMsgOp:                    TeleitemStartAuctionMsgBody{},
	TonstakePoolTouchMsgOp:                       TonstakePoolTouchMsgBody{},
	ElectorNewStakeMsgOp:                         ElectorNewStakeMsgBody{},
	DeleteDnsRecordMsgOp:                         DeleteDnsRecordMsgBody{},
	ChangeDnsRecordMsgOp:                         ChangeDnsRecordMsgBody{},
	DnsBalanceReleaseMsgOp:                       DnsBalanceReleaseMsgBody{},
	UpdatePubkeyMsgOp:                            UpdatePubkeyMsgBody{},
	UpdateStorageParamsMsgOp:                     UpdateStorageParamsMsgBody{},
	TonstakeImanagerOperationFeeMsgOp:            TonstakeImanagerOperationFeeMsgBody{},
	ChannelCooperativeCloseMsgOp:                 ChannelCooperativeCloseMsgBody{},
	OutbidNotificationMsgOp:                      OutbidNotificationMsgBody{},
	TonstakeControllerReturnAvailableFundsMsgOp:  TonstakeControllerReturnAvailableFundsMsgBody{},
	JettonBurnMsgOp:                              JettonBurnMsgBody{},
	TonstakePoolSetRolesMsgOp:                    TonstakePoolSetRolesMsgBody{},
	NftTransferMsgOp:                             NftTransferMsgBody{},
	TegroSwapTonMsgOp:                            TegroSwapTonMsgBody{},
	DedustSwapExternalMsgOp:                      DedustSwapExternalMsgBody{},
	TonstakeControllerSendRequestLoanMsgOp:       TonstakeControllerSendRequestLoanMsgBody{},
	WalletPluginDestructMsgOp:                    WalletPluginDestructMsgBody{},
	SettleChannelConditionalsMsgOp:               SettleChannelConditionalsMsgBody{},
	TopUpChannelBalanceMsgOp:                     TopUpChannelBalanceMsgBody{},
	GetRoyaltyParamsMsgOp:                        GetRoyaltyParamsMsgBody{},
	SbtRevokeMsgOp:                               SbtRevokeMsgBody{},
	PaymentRequestMsgOp:                          PaymentRequestMsgBody{},
	TonstakeControllerPoolUnhaltMsgOp:            TonstakeControllerPoolUnhaltMsgBody{},
	DedustSwapPeerMsgOp:                          DedustSwapPeerMsgBody{},
	JettonNotifyMsgOp:                            JettonNotifyMsgBody{},
	SubscriptionPaymentMsgOp:                     SubscriptionPaymentMsgBody{},
	WhalesNominatorsStakeWithdrawDelayedMsgOp:    WhalesNominatorsStakeWithdrawDelayedMsgBody{},
	MegatonWtonMintMsgOp:                         MegatonWtonMintMsgBody{},
	ChannelCooperativeCommitMsgOp:                ChannelCooperativeCommitMsgBody{},
	TonstakeControllerPoolSetSudoerMsgOp:         TonstakeControllerPoolSetSudoerMsgBody{},
	CloseStorageContractMsgOp:                    CloseStorageContractMsgBody{},
	AcceptStorageContractMsgOp:                   AcceptStorageContractMsgBody{},
	TonstakeControllerApproveMsgOp:               TonstakeControllerApproveMsgBody{},
	WhalesNominatorsDepositMsgOp:                 WhalesNominatorsDepositMsgBody{},
	JettonBurnNotificationMsgOp:                  JettonBurnNotificationMsgBody{},
	ReportStaticDataMsgOp:                        ReportStaticDataMsgBody{},
	TonstakeControllerWithdrawValidatorMsgOp:     TonstakeControllerWithdrawValidatorMsgBody{},
	TonstakeControllerPoolUpgradeMsgOp:           TonstakeControllerPoolUpgradeMsgBody{},
	TonstakePoolPrepareGovernanceMigrationMsgOp:  TonstakePoolPrepareGovernanceMigrationMsgBody{},
	WhalesNominatorsAcceptStakeMsgOp:             WhalesNominatorsAcceptStakeMsgBody{},
	TonstakePoolSetDepositSettingsMsgOp:          TonstakePoolSetDepositSettingsMsgBody{},
	WhalesNominatorsAcceptWithdrawsMsgOp:         WhalesNominatorsAcceptWithdrawsMsgBody{},
	WhalesNominatorsSendStakeMsgOp:               WhalesNominatorsSendStakeMsgBody{},
	TeleitemOkMsgOp:                              TeleitemOkMsgBody{},
	TeleitemReturnBidMsgOp:                       TeleitemReturnBidMsgBody{},
	ReportRoyaltyParamsMsgOp:                     ReportRoyaltyParamsMsgBody{},
	StorageRewardWithdrawalMsgOp:                 StorageRewardWithdrawalMsgBody{},
	DedustPayoutFromPoolMsgOp:                    DedustPayoutFromPoolMsgBody{},
	TonstakeImanagerRequestNotificationMsgOp:     TonstakeImanagerRequestNotificationMsgBody{},
	TonstakePoolDeployControllerMsgOp:            TonstakePoolDeployControllerMsgBody{},
	DedustDepositLiquidityAllMsgOp:               DedustDepositLiquidityAllMsgBody{},
	StorageContractTerminatedMsgOp:               StorageContractTerminatedMsgBody{},
	TonstakeImanagerStatsMsgOp:                   TonstakeImanagerStatsMsgBody{},
	TonstakeImanagerSetInterestMsgOp:             TonstakeImanagerSetInterestMsgBody{},
	SbtRequestOwnerMsgOp:                         SbtRequestOwnerMsgBody{},
	TonstakeControllerTopUpMsgOp:                 TonstakeControllerTopUpMsgBody{},
	StorageContractConfirmedMsgOp:                StorageContractConfirmedMsgBody{},
	ExcessMsgOp:                                  ExcessMsgBody{},
	WhalesNominatorsWithdrawMsgOp:                WhalesNominatorsWithdrawMsgBody{},
	TonstakeNftPayoutMsgOp:                       TonstakeNftPayoutMsgBody{},
	ChannelClosedMsgOp:                           ChannelClosedMsgBody{},
	TonstakePoolLoanRepaymentMsgOp:               TonstakePoolLoanRepaymentMsgBody{},
	WalletPluginDestructResponseMsgOp:            WalletPluginDestructResponseMsgBody{},
	DeployStorageContractMsgOp:                   DeployStorageContractMsgBody{},
	TonstakePoolRequestLoanMsgOp:                 TonstakePoolRequestLoanMsgBody{},
	TonstakeControllerDisapproveMsgOp:            TonstakeControllerDisapproveMsgBody{},
	DedustSwapMsgOp:                              DedustSwapMsgBody{},
	TonstakeControllerRecoverStakeMsgOp:          TonstakeControllerRecoverStakeMsgBody{},
	TonstakeNftBurnNotificationMsgOp:             TonstakeNftBurnNotificationMsgBody{},
	TonstakeControllerReturnUnusedLoanMsgOp:      TonstakeControllerReturnUnusedLoanMsgBody{},
	PaymentRequestResponseMsgOp:                  PaymentRequestResponseMsgBody{},
	TonstakeControllerUpdateValidatorHashMsgOp:   TonstakeControllerUpdateValidatorHashMsgBody{},
	TonstakeNftBurnMsgOp:                         TonstakeNftBurnMsgBody{},
	ElectorNewStakeConfirmationMsgOp:             ElectorNewStakeConfirmationMsgBody{},
	StonfiPaymentRequestMsgOp:                    StonfiPaymentRequestMsgBody{},
	ElectorRecoverStakeResponseMsgOp:             ElectorRecoverStakeResponseMsgBody{},
	BounceMsgOp:                                  BounceMsgBody{},
}
