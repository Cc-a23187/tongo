package abi

// Code autogenerated. DO NOT EDIT.

import (
	"fmt"
	"github.com/tonkeeper/tongo/boc"
	"github.com/tonkeeper/tongo/tlb"
)

// MessageDecoder takes in a message body as a cell and tries to decode it based on the first 4 bytes.
// On success, it returns an operation name and a decoded body.
func MessageDecoder(cell *boc.Cell) (MsgOpName, any, error) {
	tag, err := cell.ReadUint(32)
	if err != nil {
		return "", nil, err
	}
	switch uint32(tag) {
	case TextCommentMsgOpCode: // 0x00000000
		var resTextCommentMsgBody TextCommentMsgBody
		err = tlb.Unmarshal(cell, &resTextCommentMsgBody)
		if err == nil {
			return TextCommentMsgOp, resTextCommentMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case ProveOwnershipMsgOpCode: // 0x04ded148
		var resProveOwnershipMsgBody ProveOwnershipMsgBody
		err = tlb.Unmarshal(cell, &resProveOwnershipMsgBody)
		if err == nil {
			return ProveOwnershipMsgOp, resProveOwnershipMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case NftOwnershipAssignedMsgOpCode: // 0x05138d91
		var resNftOwnershipAssignedMsgBody NftOwnershipAssignedMsgBody
		err = tlb.Unmarshal(cell, &resNftOwnershipAssignedMsgBody)
		if err == nil {
			return NftOwnershipAssignedMsgOp, resNftOwnershipAssignedMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case OwnershipProofMsgOpCode: // 0x0524c7ae
		var resOwnershipProofMsgBody OwnershipProofMsgBody
		err = tlb.Unmarshal(cell, &resOwnershipProofMsgBody)
		if err == nil {
			return OwnershipProofMsgOp, resOwnershipProofMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case ChallengeQuarantinedChannelStateMsgOpCode: // 0x088eaa32
		var resChallengeQuarantinedChannelStateMsgBody ChallengeQuarantinedChannelStateMsgBody
		err = tlb.Unmarshal(cell, &resChallengeQuarantinedChannelStateMsgBody)
		if err == nil {
			return ChallengeQuarantinedChannelStateMsgOp, resChallengeQuarantinedChannelStateMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakePoolWithdrawalMsgOpCode: // 0x0a77535c
		var resTonstakePoolWithdrawalMsgBody TonstakePoolWithdrawalMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolWithdrawalMsgBody)
		if err == nil {
			return TonstakePoolWithdrawalMsgOp, resTonstakePoolWithdrawalMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case SbtOwnerInfoMsgOpCode: // 0x0dd607e3
		var resSbtOwnerInfoMsgBody SbtOwnerInfoMsgBody
		err = tlb.Unmarshal(cell, &resSbtOwnerInfoMsgBody)
		if err == nil {
			return SbtOwnerInfoMsgOp, resSbtOwnerInfoMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case InitPaymentChannelMsgOpCode: // 0x0e0620c2
		var resInitPaymentChannelMsgBody InitPaymentChannelMsgBody
		err = tlb.Unmarshal(cell, &resInitPaymentChannelMsgBody)
		if err == nil {
			return InitPaymentChannelMsgOp, resInitPaymentChannelMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case JettonTransferMsgOpCode: // 0x0f8a7ea5
		var resJettonTransferMsgBody JettonTransferMsgBody
		err = tlb.Unmarshal(cell, &resJettonTransferMsgBody)
		if err == nil {
			return JettonTransferMsgOp, resJettonTransferMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case OfferStorageContractMsgOpCode: // 0x107c49ef
		var resOfferStorageContractMsgBody OfferStorageContractMsgBody
		err = tlb.Unmarshal(cell, &resOfferStorageContractMsgBody)
		if err == nil {
			return OfferStorageContractMsgOp, resOfferStorageContractMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeNftInitMsgOpCode: // 0x132f9a45
		var resTonstakeNftInitMsgBody TonstakeNftInitMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeNftInitMsgBody)
		if err == nil {
			return TonstakeNftInitMsgOp, resTonstakeNftInitMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerPoolHaltMsgOpCode: // 0x139a1b4e
		var resTonstakeControllerPoolHaltMsgBody TonstakeControllerPoolHaltMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerPoolHaltMsgBody)
		if err == nil {
			return TonstakeControllerPoolHaltMsgOp, resTonstakeControllerPoolHaltMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case WhalesNominatorsForceKickMsgOpCode: // 0x1596920c
		var resWhalesNominatorsForceKickMsgBody WhalesNominatorsForceKickMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsForceKickMsgBody)
		if err == nil {
			return WhalesNominatorsForceKickMsgOp, resWhalesNominatorsForceKickMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerCreditMsgOpCode: // 0x1690c604
		var resTonstakeControllerCreditMsgBody TonstakeControllerCreditMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerCreditMsgBody)
		if err == nil {
			return TonstakeControllerCreditMsgOp, resTonstakeControllerCreditMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case JettonInternalTransferMsgOpCode: // 0x178d4519
		var resJettonInternalTransferMsgBody JettonInternalTransferMsgBody
		err = tlb.Unmarshal(cell, &resJettonInternalTransferMsgBody)
		if err == nil {
			return JettonInternalTransferMsgOp, resJettonInternalTransferMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case WhalesNominatorsWithdrawUnownedResponseMsgOpCode: // 0x1d1715bf
		var resWhalesNominatorsWithdrawUnownedResponseMsgBody WhalesNominatorsWithdrawUnownedResponseMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsWithdrawUnownedResponseMsgBody)
		if err == nil {
			return WhalesNominatorsWithdrawUnownedResponseMsgOp, resWhalesNominatorsWithdrawUnownedResponseMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case SbtDestroyMsgOpCode: // 0x1f04537a
		var resSbtDestroyMsgBody SbtDestroyMsgBody
		err = tlb.Unmarshal(cell, &resSbtDestroyMsgBody)
		if err == nil {
			return SbtDestroyMsgOp, resSbtDestroyMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case StartUncooperativeChannelCloseMsgOpCode: // 0x1f151acf
		var resStartUncooperativeChannelCloseMsgBody StartUncooperativeChannelCloseMsgBody
		err = tlb.Unmarshal(cell, &resStartUncooperativeChannelCloseMsgBody)
		if err == nil {
			return StartUncooperativeChannelCloseMsgOp, resStartUncooperativeChannelCloseMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case EncryptedTextCommentMsgOpCode: // 0x2167da4b
		var resEncryptedTextCommentMsgBody EncryptedTextCommentMsgBody
		err = tlb.Unmarshal(cell, &resEncryptedTextCommentMsgBody)
		if err == nil {
			return EncryptedTextCommentMsgOp, resEncryptedTextCommentMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case WhalesNominatorsStakeWithdrawCompletedMsgOpCode: // 0x23d421e1
		var resWhalesNominatorsStakeWithdrawCompletedMsgBody WhalesNominatorsStakeWithdrawCompletedMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsStakeWithdrawCompletedMsgBody)
		if err == nil && !completedRead(cell) {
			err = ErrStructSizeMismatch
		}
		if err == nil {
			return WhalesNominatorsStakeWithdrawCompletedMsgOp, resWhalesNominatorsStakeWithdrawCompletedMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case WhalesNominatorsWithdrawUnownedMsgOpCode: // 0x251d6a98
		var resWhalesNominatorsWithdrawUnownedMsgBody WhalesNominatorsWithdrawUnownedMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsWithdrawUnownedMsgBody)
		if err == nil && !completedRead(cell) {
			err = ErrStructSizeMismatch
		}
		if err == nil {
			return WhalesNominatorsWithdrawUnownedMsgOp, resWhalesNominatorsWithdrawUnownedMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case FinishUncooperativeChannelCloseMsgOpCode: // 0x25432a91
		var resFinishUncooperativeChannelCloseMsgBody FinishUncooperativeChannelCloseMsgBody
		err = tlb.Unmarshal(cell, &resFinishUncooperativeChannelCloseMsgBody)
		if err == nil {
			return FinishUncooperativeChannelCloseMsgOp, resFinishUncooperativeChannelCloseMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case StonfiSwapMsgOpCode: // 0x25938561
		var resStonfiSwapMsgBody StonfiSwapMsgBody
		err = tlb.Unmarshal(cell, &resStonfiSwapMsgBody)
		if err == nil {
			return StonfiSwapMsgOp, resStonfiSwapMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerPoolSendMessageMsgOpCode: // 0x270695fb
		var resTonstakeControllerPoolSendMessageMsgBody TonstakeControllerPoolSendMessageMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerPoolSendMessageMsgBody)
		if err == nil {
			return TonstakeControllerPoolSendMessageMsgOp, resTonstakeControllerPoolSendMessageMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TeleitemDeployMsgOpCode: // 0x299a3e15
		var resTeleitemDeployMsgBody TeleitemDeployMsgBody
		err = tlb.Unmarshal(cell, &resTeleitemDeployMsgBody)
		if err == nil {
			return TeleitemDeployMsgOp, resTeleitemDeployMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakePoolSetGovernanceFeeMsgOpCode: // 0x2aaa96a0
		var resTonstakePoolSetGovernanceFeeMsgBody TonstakePoolSetGovernanceFeeMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolSetGovernanceFeeMsgBody)
		if err == nil {
			return TonstakePoolSetGovernanceFeeMsgOp, resTonstakePoolSetGovernanceFeeMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case GetStaticDataMsgOpCode: // 0x2fcb26a2
		var resGetStaticDataMsgBody GetStaticDataMsgBody
		err = tlb.Unmarshal(cell, &resGetStaticDataMsgBody)
		if err == nil {
			return GetStaticDataMsgOp, resGetStaticDataMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerValidatorWithdrawalMsgOpCode: // 0x30026327
		var resTonstakeControllerValidatorWithdrawalMsgBody TonstakeControllerValidatorWithdrawalMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerValidatorWithdrawalMsgBody)
		if err == nil {
			return TonstakeControllerValidatorWithdrawalMsgOp, resTonstakeControllerValidatorWithdrawalMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakePoolWithdrawMsgOpCode: // 0x319b0cdc
		var resTonstakePoolWithdrawMsgBody TonstakePoolWithdrawMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolWithdrawMsgBody)
		if err == nil {
			return TonstakePoolWithdrawMsgOp, resTonstakePoolWithdrawMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case AuctionFillUpMsgOpCode: // 0x370fec51
		var resAuctionFillUpMsgBody AuctionFillUpMsgBody
		err = tlb.Unmarshal(cell, &resAuctionFillUpMsgBody)
		if err == nil {
			return AuctionFillUpMsgOp, resAuctionFillUpMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TeleitemCancelAuctionMsgOpCode: // 0x371638ae
		var resTeleitemCancelAuctionMsgBody TeleitemCancelAuctionMsgBody
		err = tlb.Unmarshal(cell, &resTeleitemCancelAuctionMsgBody)
		if err == nil {
			return TeleitemCancelAuctionMsgOp, resTeleitemCancelAuctionMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case ProofStorageMsgOpCode: // 0x419d5d4d
		var resProofStorageMsgBody ProofStorageMsgBody
		err = tlb.Unmarshal(cell, &resProofStorageMsgBody)
		if err == nil {
			return ProofStorageMsgOp, resProofStorageMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case ProcessGovernanceDecisionMsgOpCode: // 0x44beae41
		var resProcessGovernanceDecisionMsgBody ProcessGovernanceDecisionMsgBody
		err = tlb.Unmarshal(cell, &resProcessGovernanceDecisionMsgBody)
		if err == nil {
			return ProcessGovernanceDecisionMsgOp, resProcessGovernanceDecisionMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TelemintDeployMsgOpCode: // 0x4637289a
		var resTelemintDeployMsgBody TelemintDeployMsgBody
		err = tlb.Unmarshal(cell, &resTelemintDeployMsgBody)
		if err == nil {
			return TelemintDeployMsgOp, resTelemintDeployMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TelemintDeployV2MsgOpCode: // 0x4637289b
		var resTelemintDeployV2MsgBody TelemintDeployV2MsgBody
		err = tlb.Unmarshal(cell, &resTelemintDeployV2MsgBody)
		if err == nil {
			return TelemintDeployV2MsgOp, resTelemintDeployV2MsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case StorageWithdrawMsgOpCode: // 0x46ed2e94
		var resStorageWithdrawMsgBody StorageWithdrawMsgBody
		err = tlb.Unmarshal(cell, &resStorageWithdrawMsgBody)
		if err == nil {
			return StorageWithdrawMsgOp, resStorageWithdrawMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case DedustPayoutMsgOpCode: // 0x474f86cf
		var resDedustPayoutMsgBody DedustPayoutMsgBody
		err = tlb.Unmarshal(cell, &resDedustPayoutMsgBody)
		if err == nil {
			return DedustPayoutMsgOp, resDedustPayoutMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case ElectorRecoverStakeRequestMsgOpCode: // 0x47657424
		var resElectorRecoverStakeRequestMsgBody ElectorRecoverStakeRequestMsgBody
		err = tlb.Unmarshal(cell, &resElectorRecoverStakeRequestMsgBody)
		if err == nil {
			return ElectorRecoverStakeRequestMsgOp, resElectorRecoverStakeRequestMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakePoolDepositMsgOpCode: // 0x47d54391
		var resTonstakePoolDepositMsgBody TonstakePoolDepositMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolDepositMsgBody)
		if err == nil {
			return TonstakePoolDepositMsgOp, resTonstakePoolDepositMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TeleitemStartAuctionMsgOpCode: // 0x487a8e81
		var resTeleitemStartAuctionMsgBody TeleitemStartAuctionMsgBody
		err = tlb.Unmarshal(cell, &resTeleitemStartAuctionMsgBody)
		if err == nil {
			return TeleitemStartAuctionMsgOp, resTeleitemStartAuctionMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakePoolTouchMsgOpCode: // 0x4bc7c2df
		var resTonstakePoolTouchMsgBody TonstakePoolTouchMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolTouchMsgBody)
		if err == nil {
			return TonstakePoolTouchMsgOp, resTonstakePoolTouchMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case ElectorNewStakeMsgOpCode: // 0x4e73744b
		var resElectorNewStakeMsgBody ElectorNewStakeMsgBody
		err = tlb.Unmarshal(cell, &resElectorNewStakeMsgBody)
		if err == nil {
			return ElectorNewStakeMsgOp, resElectorNewStakeMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case 0x4eb1f0f9: //DeleteDnsRecord, ChangeDnsRecord,
		cell = cell.CopyRemaining()
		var resDeleteDnsRecordMsgBody DeleteDnsRecordMsgBody
		err = tlb.Unmarshal(cell, &resDeleteDnsRecordMsgBody)
		if err == nil && !completedRead(cell) {
			err = ErrStructSizeMismatch
		}
		if err == nil {
			return DeleteDnsRecordMsgOp, resDeleteDnsRecordMsgBody, nil
		}
		cell.ResetCounters()
		var resChangeDnsRecordMsgBody ChangeDnsRecordMsgBody
		err = tlb.Unmarshal(cell, &resChangeDnsRecordMsgBody)
		if err == nil {
			return ChangeDnsRecordMsgOp, resChangeDnsRecordMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case DnsBalanceReleaseMsgOpCode: // 0x4ed14b65
		var resDnsBalanceReleaseMsgBody DnsBalanceReleaseMsgBody
		err = tlb.Unmarshal(cell, &resDnsBalanceReleaseMsgBody)
		if err == nil {
			return DnsBalanceReleaseMsgOp, resDnsBalanceReleaseMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case UpdatePubkeyMsgOpCode: // 0x53f34cd6
		var resUpdatePubkeyMsgBody UpdatePubkeyMsgBody
		err = tlb.Unmarshal(cell, &resUpdatePubkeyMsgBody)
		if err == nil {
			return UpdatePubkeyMsgOp, resUpdatePubkeyMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case UpdateStorageParamsMsgOpCode: // 0x54cbf19b
		var resUpdateStorageParamsMsgBody UpdateStorageParamsMsgBody
		err = tlb.Unmarshal(cell, &resUpdateStorageParamsMsgBody)
		if err == nil {
			return UpdateStorageParamsMsgOp, resUpdateStorageParamsMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeImanagerOperationFeeMsgOpCode: // 0x54d37487
		var resTonstakeImanagerOperationFeeMsgBody TonstakeImanagerOperationFeeMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeImanagerOperationFeeMsgBody)
		if err == nil {
			return TonstakeImanagerOperationFeeMsgOp, resTonstakeImanagerOperationFeeMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case ChannelCooperativeCloseMsgOpCode: // 0x5577587e
		var resChannelCooperativeCloseMsgBody ChannelCooperativeCloseMsgBody
		err = tlb.Unmarshal(cell, &resChannelCooperativeCloseMsgBody)
		if err == nil {
			return ChannelCooperativeCloseMsgOp, resChannelCooperativeCloseMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case OutbidNotificationMsgOpCode: // 0x557cea20
		var resOutbidNotificationMsgBody OutbidNotificationMsgBody
		err = tlb.Unmarshal(cell, &resOutbidNotificationMsgBody)
		if err == nil {
			return OutbidNotificationMsgOp, resOutbidNotificationMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerReturnAvailableFundsMsgOpCode: // 0x55c26cd5
		var resTonstakeControllerReturnAvailableFundsMsgBody TonstakeControllerReturnAvailableFundsMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerReturnAvailableFundsMsgBody)
		if err == nil {
			return TonstakeControllerReturnAvailableFundsMsgOp, resTonstakeControllerReturnAvailableFundsMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case JettonBurnMsgOpCode: // 0x595f07bc
		var resJettonBurnMsgBody JettonBurnMsgBody
		err = tlb.Unmarshal(cell, &resJettonBurnMsgBody)
		if err == nil {
			return JettonBurnMsgOp, resJettonBurnMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakePoolSetRolesMsgOpCode: // 0x5e517f36
		var resTonstakePoolSetRolesMsgBody TonstakePoolSetRolesMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolSetRolesMsgBody)
		if err == nil {
			return TonstakePoolSetRolesMsgOp, resTonstakePoolSetRolesMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case NftTransferMsgOpCode: // 0x5fcc3d14
		var resNftTransferMsgBody NftTransferMsgBody
		err = tlb.Unmarshal(cell, &resNftTransferMsgBody)
		if err == nil {
			return NftTransferMsgOp, resNftTransferMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case DedustSwapExternalMsgOpCode: // 0x61ee542d
		var resDedustSwapExternalMsgBody DedustSwapExternalMsgBody
		err = tlb.Unmarshal(cell, &resDedustSwapExternalMsgBody)
		if err == nil {
			return DedustSwapExternalMsgOp, resDedustSwapExternalMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerSendRequestLoanMsgOpCode: // 0x6335b11a
		var resTonstakeControllerSendRequestLoanMsgBody TonstakeControllerSendRequestLoanMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerSendRequestLoanMsgBody)
		if err == nil {
			return TonstakeControllerSendRequestLoanMsgOp, resTonstakeControllerSendRequestLoanMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case WalletPluginDestructMsgOpCode: // 0x64737472
		var resWalletPluginDestructMsgBody WalletPluginDestructMsgBody
		err = tlb.Unmarshal(cell, &resWalletPluginDestructMsgBody)
		if err == nil {
			return WalletPluginDestructMsgOp, resWalletPluginDestructMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case SettleChannelConditionalsMsgOpCode: // 0x66f6f069
		var resSettleChannelConditionalsMsgBody SettleChannelConditionalsMsgBody
		err = tlb.Unmarshal(cell, &resSettleChannelConditionalsMsgBody)
		if err == nil {
			return SettleChannelConditionalsMsgOp, resSettleChannelConditionalsMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TopUpChannelBalanceMsgOpCode: // 0x67c7d281
		var resTopUpChannelBalanceMsgBody TopUpChannelBalanceMsgBody
		err = tlb.Unmarshal(cell, &resTopUpChannelBalanceMsgBody)
		if err == nil {
			return TopUpChannelBalanceMsgOp, resTopUpChannelBalanceMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case GetRoyaltyParamsMsgOpCode: // 0x693d3950
		var resGetRoyaltyParamsMsgBody GetRoyaltyParamsMsgBody
		err = tlb.Unmarshal(cell, &resGetRoyaltyParamsMsgBody)
		if err == nil {
			return GetRoyaltyParamsMsgOp, resGetRoyaltyParamsMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case SbtRevokeMsgOpCode: // 0x6f89f5e3
		var resSbtRevokeMsgBody SbtRevokeMsgBody
		err = tlb.Unmarshal(cell, &resSbtRevokeMsgBody)
		if err == nil {
			return SbtRevokeMsgOp, resSbtRevokeMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case PaymentRequestMsgOpCode: // 0x706c7567
		var resPaymentRequestMsgBody PaymentRequestMsgBody
		err = tlb.Unmarshal(cell, &resPaymentRequestMsgBody)
		if err == nil {
			return PaymentRequestMsgOp, resPaymentRequestMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerPoolUnhaltMsgOpCode: // 0x7247e7a5
		var resTonstakeControllerPoolUnhaltMsgBody TonstakeControllerPoolUnhaltMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerPoolUnhaltMsgBody)
		if err == nil {
			return TonstakeControllerPoolUnhaltMsgOp, resTonstakeControllerPoolUnhaltMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case DedustSwapPeerMsgOpCode: // 0x72aca8aa
		var resDedustSwapPeerMsgBody DedustSwapPeerMsgBody
		err = tlb.Unmarshal(cell, &resDedustSwapPeerMsgBody)
		if err == nil {
			return DedustSwapPeerMsgOp, resDedustSwapPeerMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case JettonNotifyMsgOpCode: // 0x7362d09c
		var resJettonNotifyMsgBody JettonNotifyMsgBody
		err = tlb.Unmarshal(cell, &resJettonNotifyMsgBody)
		if err == nil {
			return JettonNotifyMsgOp, resJettonNotifyMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case SubscriptionPaymentMsgOpCode: // 0x73756273
		var resSubscriptionPaymentMsgBody SubscriptionPaymentMsgBody
		err = tlb.Unmarshal(cell, &resSubscriptionPaymentMsgBody)
		if err == nil {
			return SubscriptionPaymentMsgOp, resSubscriptionPaymentMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case WhalesNominatorsStakeWithdrawDelayedMsgOpCode: // 0x74bb3427
		var resWhalesNominatorsStakeWithdrawDelayedMsgBody WhalesNominatorsStakeWithdrawDelayedMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsStakeWithdrawDelayedMsgBody)
		if err == nil && !completedRead(cell) {
			err = ErrStructSizeMismatch
		}
		if err == nil {
			return WhalesNominatorsStakeWithdrawDelayedMsgOp, resWhalesNominatorsStakeWithdrawDelayedMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case MegatonWtonMintMsgOpCode: // 0x77a33521
		var resMegatonWtonMintMsgBody MegatonWtonMintMsgBody
		err = tlb.Unmarshal(cell, &resMegatonWtonMintMsgBody)
		if err == nil {
			return MegatonWtonMintMsgOp, resMegatonWtonMintMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case ChannelCooperativeCommitMsgOpCode: // 0x79a126ef
		var resChannelCooperativeCommitMsgBody ChannelCooperativeCommitMsgBody
		err = tlb.Unmarshal(cell, &resChannelCooperativeCommitMsgBody)
		if err == nil {
			return ChannelCooperativeCommitMsgOp, resChannelCooperativeCommitMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerPoolSetSudoerMsgOpCode: // 0x79e7c016
		var resTonstakeControllerPoolSetSudoerMsgBody TonstakeControllerPoolSetSudoerMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerPoolSetSudoerMsgBody)
		if err == nil {
			return TonstakeControllerPoolSetSudoerMsgOp, resTonstakeControllerPoolSetSudoerMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case CloseStorageContractMsgOpCode: // 0x79f937ea
		var resCloseStorageContractMsgBody CloseStorageContractMsgBody
		err = tlb.Unmarshal(cell, &resCloseStorageContractMsgBody)
		if err == nil {
			return CloseStorageContractMsgOp, resCloseStorageContractMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case AcceptStorageContractMsgOpCode: // 0x7a361688
		var resAcceptStorageContractMsgBody AcceptStorageContractMsgBody
		err = tlb.Unmarshal(cell, &resAcceptStorageContractMsgBody)
		if err == nil {
			return AcceptStorageContractMsgOp, resAcceptStorageContractMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerApproveMsgOpCode: // 0x7b4b42e6
		var resTonstakeControllerApproveMsgBody TonstakeControllerApproveMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerApproveMsgBody)
		if err == nil {
			return TonstakeControllerApproveMsgOp, resTonstakeControllerApproveMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case WhalesNominatorsDepositMsgOpCode: // 0x7bcd1fef
		var resWhalesNominatorsDepositMsgBody WhalesNominatorsDepositMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsDepositMsgBody)
		if err == nil {
			return WhalesNominatorsDepositMsgOp, resWhalesNominatorsDepositMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case JettonBurnNotificationMsgOpCode: // 0x7bdd97de
		var resJettonBurnNotificationMsgBody JettonBurnNotificationMsgBody
		err = tlb.Unmarshal(cell, &resJettonBurnNotificationMsgBody)
		if err == nil {
			return JettonBurnNotificationMsgOp, resJettonBurnNotificationMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case ReportStaticDataMsgOpCode: // 0x8b771735
		var resReportStaticDataMsgBody ReportStaticDataMsgBody
		err = tlb.Unmarshal(cell, &resReportStaticDataMsgBody)
		if err == nil {
			return ReportStaticDataMsgOp, resReportStaticDataMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerWithdrawValidatorMsgOpCode: // 0x8efed779
		var resTonstakeControllerWithdrawValidatorMsgBody TonstakeControllerWithdrawValidatorMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerWithdrawValidatorMsgBody)
		if err == nil {
			return TonstakeControllerWithdrawValidatorMsgOp, resTonstakeControllerWithdrawValidatorMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerPoolUpgradeMsgOpCode: // 0x96e7f528
		var resTonstakeControllerPoolUpgradeMsgBody TonstakeControllerPoolUpgradeMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerPoolUpgradeMsgBody)
		if err == nil {
			return TonstakeControllerPoolUpgradeMsgOp, resTonstakeControllerPoolUpgradeMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakePoolPrepareGovernanceMigrationMsgOpCode: // 0x9971881c
		var resTonstakePoolPrepareGovernanceMigrationMsgBody TonstakePoolPrepareGovernanceMigrationMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolPrepareGovernanceMigrationMsgBody)
		if err == nil {
			return TonstakePoolPrepareGovernanceMigrationMsgOp, resTonstakePoolPrepareGovernanceMigrationMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case WhalesNominatorsAcceptStakeMsgOpCode: // 0x99a811fb
		var resWhalesNominatorsAcceptStakeMsgBody WhalesNominatorsAcceptStakeMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsAcceptStakeMsgBody)
		if err == nil {
			return WhalesNominatorsAcceptStakeMsgOp, resWhalesNominatorsAcceptStakeMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakePoolSetDepositSettingsMsgOpCode: // 0x9bf5561c
		var resTonstakePoolSetDepositSettingsMsgBody TonstakePoolSetDepositSettingsMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolSetDepositSettingsMsgBody)
		if err == nil {
			return TonstakePoolSetDepositSettingsMsgOp, resTonstakePoolSetDepositSettingsMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case WhalesNominatorsAcceptWithdrawsMsgOpCode: // 0xa19fd934
		var resWhalesNominatorsAcceptWithdrawsMsgBody WhalesNominatorsAcceptWithdrawsMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsAcceptWithdrawsMsgBody)
		if err == nil {
			return WhalesNominatorsAcceptWithdrawsMsgOp, resWhalesNominatorsAcceptWithdrawsMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case WhalesNominatorsSendStakeMsgOpCode: // 0xa2065f2c
		var resWhalesNominatorsSendStakeMsgBody WhalesNominatorsSendStakeMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsSendStakeMsgBody)
		if err == nil && !completedRead(cell) {
			err = ErrStructSizeMismatch
		}
		if err == nil {
			return WhalesNominatorsSendStakeMsgOp, resWhalesNominatorsSendStakeMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TeleitemOkMsgOpCode: // 0xa37a0983
		var resTeleitemOkMsgBody TeleitemOkMsgBody
		err = tlb.Unmarshal(cell, &resTeleitemOkMsgBody)
		if err == nil {
			return TeleitemOkMsgOp, resTeleitemOkMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TeleitemReturnBidMsgOpCode: // 0xa43227e1
		var resTeleitemReturnBidMsgBody TeleitemReturnBidMsgBody
		err = tlb.Unmarshal(cell, &resTeleitemReturnBidMsgBody)
		if err == nil {
			return TeleitemReturnBidMsgOp, resTeleitemReturnBidMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case ReportRoyaltyParamsMsgOpCode: // 0xa8cb00ad
		var resReportRoyaltyParamsMsgBody ReportRoyaltyParamsMsgBody
		err = tlb.Unmarshal(cell, &resReportRoyaltyParamsMsgBody)
		if err == nil {
			return ReportRoyaltyParamsMsgOp, resReportRoyaltyParamsMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case StorageRewardWithdrawalMsgOpCode: // 0xa91baf56
		var resStorageRewardWithdrawalMsgBody StorageRewardWithdrawalMsgBody
		err = tlb.Unmarshal(cell, &resStorageRewardWithdrawalMsgBody)
		if err == nil {
			return StorageRewardWithdrawalMsgOp, resStorageRewardWithdrawalMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case DedustPayoutFromPoolMsgOpCode: // 0xad4eb6f5
		var resDedustPayoutFromPoolMsgBody DedustPayoutFromPoolMsgBody
		err = tlb.Unmarshal(cell, &resDedustPayoutFromPoolMsgBody)
		if err == nil {
			return DedustPayoutFromPoolMsgOp, resDedustPayoutFromPoolMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeImanagerRequestNotificationMsgOpCode: // 0xb1ebae06
		var resTonstakeImanagerRequestNotificationMsgBody TonstakeImanagerRequestNotificationMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeImanagerRequestNotificationMsgBody)
		if err == nil {
			return TonstakeImanagerRequestNotificationMsgOp, resTonstakeImanagerRequestNotificationMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakePoolDeployControllerMsgOpCode: // 0xb27edcad
		var resTonstakePoolDeployControllerMsgBody TonstakePoolDeployControllerMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolDeployControllerMsgBody)
		if err == nil {
			return TonstakePoolDeployControllerMsgOp, resTonstakePoolDeployControllerMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case DedustDepositLiquidityAllMsgOpCode: // 0xb56b9598
		var resDedustDepositLiquidityAllMsgBody DedustDepositLiquidityAllMsgBody
		err = tlb.Unmarshal(cell, &resDedustDepositLiquidityAllMsgBody)
		if err == nil {
			return DedustDepositLiquidityAllMsgOp, resDedustDepositLiquidityAllMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case StorageContractTerminatedMsgOpCode: // 0xb6236d63
		var resStorageContractTerminatedMsgBody StorageContractTerminatedMsgBody
		err = tlb.Unmarshal(cell, &resStorageContractTerminatedMsgBody)
		if err == nil {
			return StorageContractTerminatedMsgOp, resStorageContractTerminatedMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeImanagerStatsMsgOpCode: // 0xc1344900
		var resTonstakeImanagerStatsMsgBody TonstakeImanagerStatsMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeImanagerStatsMsgBody)
		if err == nil {
			return TonstakeImanagerStatsMsgOp, resTonstakeImanagerStatsMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeImanagerSetInterestMsgOpCode: // 0xc9f04485
		var resTonstakeImanagerSetInterestMsgBody TonstakeImanagerSetInterestMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeImanagerSetInterestMsgBody)
		if err == nil {
			return TonstakeImanagerSetInterestMsgOp, resTonstakeImanagerSetInterestMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case SbtRequestOwnerMsgOpCode: // 0xd0c3bfea
		var resSbtRequestOwnerMsgBody SbtRequestOwnerMsgBody
		err = tlb.Unmarshal(cell, &resSbtRequestOwnerMsgBody)
		if err == nil {
			return SbtRequestOwnerMsgOp, resSbtRequestOwnerMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerTopUpMsgOpCode: // 0xd372158c
		var resTonstakeControllerTopUpMsgBody TonstakeControllerTopUpMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerTopUpMsgBody)
		if err == nil {
			return TonstakeControllerTopUpMsgOp, resTonstakeControllerTopUpMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case StorageContractConfirmedMsgOpCode: // 0xd4caedcd
		var resStorageContractConfirmedMsgBody StorageContractConfirmedMsgBody
		err = tlb.Unmarshal(cell, &resStorageContractConfirmedMsgBody)
		if err == nil {
			return StorageContractConfirmedMsgOp, resStorageContractConfirmedMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case ExcessMsgOpCode: // 0xd53276db
		var resExcessMsgBody ExcessMsgBody
		err = tlb.Unmarshal(cell, &resExcessMsgBody)
		if err == nil {
			return ExcessMsgOp, resExcessMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case WhalesNominatorsWithdrawMsgOpCode: // 0xda803efd
		var resWhalesNominatorsWithdrawMsgBody WhalesNominatorsWithdrawMsgBody
		err = tlb.Unmarshal(cell, &resWhalesNominatorsWithdrawMsgBody)
		if err == nil {
			return WhalesNominatorsWithdrawMsgOp, resWhalesNominatorsWithdrawMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case ChannelClosedMsgOpCode: // 0xdddc88ba
		var resChannelClosedMsgBody ChannelClosedMsgBody
		err = tlb.Unmarshal(cell, &resChannelClosedMsgBody)
		if err == nil {
			return ChannelClosedMsgOp, resChannelClosedMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakePoolLoanRepaymentMsgOpCode: // 0xdfdca27b
		var resTonstakePoolLoanRepaymentMsgBody TonstakePoolLoanRepaymentMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolLoanRepaymentMsgBody)
		if err == nil {
			return TonstakePoolLoanRepaymentMsgOp, resTonstakePoolLoanRepaymentMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case WalletPluginDestructResponseMsgOpCode: // 0xe4737472
		var resWalletPluginDestructResponseMsgBody WalletPluginDestructResponseMsgBody
		err = tlb.Unmarshal(cell, &resWalletPluginDestructResponseMsgBody)
		if err == nil {
			return WalletPluginDestructResponseMsgOp, resWalletPluginDestructResponseMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case DeployStorageContractMsgOpCode: // 0xe4748df1
		var resDeployStorageContractMsgBody DeployStorageContractMsgBody
		err = tlb.Unmarshal(cell, &resDeployStorageContractMsgBody)
		if err == nil {
			return DeployStorageContractMsgOp, resDeployStorageContractMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakePoolRequestLoanMsgOpCode: // 0xe642c965
		var resTonstakePoolRequestLoanMsgBody TonstakePoolRequestLoanMsgBody
		err = tlb.Unmarshal(cell, &resTonstakePoolRequestLoanMsgBody)
		if err == nil {
			return TonstakePoolRequestLoanMsgOp, resTonstakePoolRequestLoanMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerDisapproveMsgOpCode: // 0xe8a0abfe
		var resTonstakeControllerDisapproveMsgBody TonstakeControllerDisapproveMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerDisapproveMsgBody)
		if err == nil {
			return TonstakeControllerDisapproveMsgOp, resTonstakeControllerDisapproveMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case DedustSwapMsgOpCode: // 0xea06185d
		var resDedustSwapMsgBody DedustSwapMsgBody
		err = tlb.Unmarshal(cell, &resDedustSwapMsgBody)
		if err == nil {
			return DedustSwapMsgOp, resDedustSwapMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerRecoverStakeMsgOpCode: // 0xeb373a05
		var resTonstakeControllerRecoverStakeMsgBody TonstakeControllerRecoverStakeMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerRecoverStakeMsgBody)
		if err == nil {
			return TonstakeControllerRecoverStakeMsgOp, resTonstakeControllerRecoverStakeMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeNftBurnNotificationMsgOpCode: // 0xed58b0b2
		var resTonstakeNftBurnNotificationMsgBody TonstakeNftBurnNotificationMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeNftBurnNotificationMsgBody)
		if err == nil {
			return TonstakeNftBurnNotificationMsgOp, resTonstakeNftBurnNotificationMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerReturnUnusedLoanMsgOpCode: // 0xed7378a6
		var resTonstakeControllerReturnUnusedLoanMsgBody TonstakeControllerReturnUnusedLoanMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerReturnUnusedLoanMsgBody)
		if err == nil {
			return TonstakeControllerReturnUnusedLoanMsgOp, resTonstakeControllerReturnUnusedLoanMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case PaymentRequestResponseMsgOpCode: // 0xf06c7567
		var resPaymentRequestResponseMsgBody PaymentRequestResponseMsgBody
		err = tlb.Unmarshal(cell, &resPaymentRequestResponseMsgBody)
		if err == nil {
			return PaymentRequestResponseMsgOp, resPaymentRequestResponseMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeControllerUpdateValidatorHashMsgOpCode: // 0xf0fd2250
		var resTonstakeControllerUpdateValidatorHashMsgBody TonstakeControllerUpdateValidatorHashMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeControllerUpdateValidatorHashMsgBody)
		if err == nil {
			return TonstakeControllerUpdateValidatorHashMsgOp, resTonstakeControllerUpdateValidatorHashMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case TonstakeNftBurnMsgOpCode: // 0xf127fe4e
		var resTonstakeNftBurnMsgBody TonstakeNftBurnMsgBody
		err = tlb.Unmarshal(cell, &resTonstakeNftBurnMsgBody)
		if err == nil {
			return TonstakeNftBurnMsgOp, resTonstakeNftBurnMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case ElectorNewStakeConfirmationMsgOpCode: // 0xf374484c
		var resElectorNewStakeConfirmationMsgBody ElectorNewStakeConfirmationMsgBody
		err = tlb.Unmarshal(cell, &resElectorNewStakeConfirmationMsgBody)
		if err == nil {
			return ElectorNewStakeConfirmationMsgOp, resElectorNewStakeConfirmationMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case StonfiPaymentRequestMsgOpCode: // 0xf93bb43f
		var resStonfiPaymentRequestMsgBody StonfiPaymentRequestMsgBody
		err = tlb.Unmarshal(cell, &resStonfiPaymentRequestMsgBody)
		if err == nil && !completedRead(cell) {
			err = ErrStructSizeMismatch
		}
		if err == nil {
			return StonfiPaymentRequestMsgOp, resStonfiPaymentRequestMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case ElectorRecoverStakeResponseMsgOpCode: // 0xf96f7324
		var resElectorRecoverStakeResponseMsgBody ElectorRecoverStakeResponseMsgBody
		err = tlb.Unmarshal(cell, &resElectorRecoverStakeResponseMsgBody)
		if err == nil {
			return ElectorRecoverStakeResponseMsgOp, resElectorRecoverStakeResponseMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	case BounceMsgOpCode: // 0xffffffff
		var resBounceMsgBody BounceMsgBody
		err = tlb.Unmarshal(cell, &resBounceMsgBody)
		if err == nil {
			return BounceMsgOp, resBounceMsgBody, nil
		}
		cell.ResetCounters()
		return "", nil, err
	}
	return "", nil, fmt.Errorf("invalid message tag")
}

func completedRead(cell *boc.Cell) bool {
	return cell.RefsAvailableForRead() == 0 && cell.BitsAvailableForRead() == 0
}

// MsgOpName is a human-friendly name for a message's operation which is identified by the first 4 bytes of the message's body.
type MsgOpName = string

const (
	TextCommentMsgOp                             MsgOpName = "TextComment"
	ProveOwnershipMsgOp                          MsgOpName = "ProveOwnership"
	NftOwnershipAssignedMsgOp                    MsgOpName = "NftOwnershipAssigned"
	OwnershipProofMsgOp                          MsgOpName = "OwnershipProof"
	ChallengeQuarantinedChannelStateMsgOp        MsgOpName = "ChallengeQuarantinedChannelState"
	TonstakePoolWithdrawalMsgOp                  MsgOpName = "TonstakePoolWithdrawal"
	SbtOwnerInfoMsgOp                            MsgOpName = "SbtOwnerInfo"
	InitPaymentChannelMsgOp                      MsgOpName = "InitPaymentChannel"
	JettonTransferMsgOp                          MsgOpName = "JettonTransfer"
	OfferStorageContractMsgOp                    MsgOpName = "OfferStorageContract"
	TonstakeNftInitMsgOp                         MsgOpName = "TonstakeNftInit"
	TonstakeControllerPoolHaltMsgOp              MsgOpName = "TonstakeControllerPoolHalt"
	WhalesNominatorsForceKickMsgOp               MsgOpName = "WhalesNominatorsForceKick"
	TonstakeControllerCreditMsgOp                MsgOpName = "TonstakeControllerCredit"
	JettonInternalTransferMsgOp                  MsgOpName = "JettonInternalTransfer"
	WhalesNominatorsWithdrawUnownedResponseMsgOp MsgOpName = "WhalesNominatorsWithdrawUnownedResponse"
	SbtDestroyMsgOp                              MsgOpName = "SbtDestroy"
	StartUncooperativeChannelCloseMsgOp          MsgOpName = "StartUncooperativeChannelClose"
	EncryptedTextCommentMsgOp                    MsgOpName = "EncryptedTextComment"
	WhalesNominatorsStakeWithdrawCompletedMsgOp  MsgOpName = "WhalesNominatorsStakeWithdrawCompleted"
	WhalesNominatorsWithdrawUnownedMsgOp         MsgOpName = "WhalesNominatorsWithdrawUnowned"
	FinishUncooperativeChannelCloseMsgOp         MsgOpName = "FinishUncooperativeChannelClose"
	StonfiSwapMsgOp                              MsgOpName = "StonfiSwap"
	TonstakeControllerPoolSendMessageMsgOp       MsgOpName = "TonstakeControllerPoolSendMessage"
	TeleitemDeployMsgOp                          MsgOpName = "TeleitemDeploy"
	TonstakePoolSetGovernanceFeeMsgOp            MsgOpName = "TonstakePoolSetGovernanceFee"
	GetStaticDataMsgOp                           MsgOpName = "GetStaticData"
	TonstakeControllerValidatorWithdrawalMsgOp   MsgOpName = "TonstakeControllerValidatorWithdrawal"
	TonstakePoolWithdrawMsgOp                    MsgOpName = "TonstakePoolWithdraw"
	AuctionFillUpMsgOp                           MsgOpName = "AuctionFillUp"
	TeleitemCancelAuctionMsgOp                   MsgOpName = "TeleitemCancelAuction"
	ProofStorageMsgOp                            MsgOpName = "ProofStorage"
	ProcessGovernanceDecisionMsgOp               MsgOpName = "ProcessGovernanceDecision"
	TelemintDeployMsgOp                          MsgOpName = "TelemintDeploy"
	TelemintDeployV2MsgOp                        MsgOpName = "TelemintDeployV2"
	StorageWithdrawMsgOp                         MsgOpName = "StorageWithdraw"
	DedustPayoutMsgOp                            MsgOpName = "DedustPayout"
	ElectorRecoverStakeRequestMsgOp              MsgOpName = "ElectorRecoverStakeRequest"
	TonstakePoolDepositMsgOp                     MsgOpName = "TonstakePoolDeposit"
	TeleitemStartAuctionMsgOp                    MsgOpName = "TeleitemStartAuction"
	TonstakePoolTouchMsgOp                       MsgOpName = "TonstakePoolTouch"
	ElectorNewStakeMsgOp                         MsgOpName = "ElectorNewStake"
	DeleteDnsRecordMsgOp                         MsgOpName = "DeleteDnsRecord"
	ChangeDnsRecordMsgOp                         MsgOpName = "ChangeDnsRecord"
	DnsBalanceReleaseMsgOp                       MsgOpName = "DnsBalanceRelease"
	UpdatePubkeyMsgOp                            MsgOpName = "UpdatePubkey"
	UpdateStorageParamsMsgOp                     MsgOpName = "UpdateStorageParams"
	TonstakeImanagerOperationFeeMsgOp            MsgOpName = "TonstakeImanagerOperationFee"
	ChannelCooperativeCloseMsgOp                 MsgOpName = "ChannelCooperativeClose"
	OutbidNotificationMsgOp                      MsgOpName = "OutbidNotification"
	TonstakeControllerReturnAvailableFundsMsgOp  MsgOpName = "TonstakeControllerReturnAvailableFunds"
	JettonBurnMsgOp                              MsgOpName = "JettonBurn"
	TonstakePoolSetRolesMsgOp                    MsgOpName = "TonstakePoolSetRoles"
	NftTransferMsgOp                             MsgOpName = "NftTransfer"
	DedustSwapExternalMsgOp                      MsgOpName = "DedustSwapExternal"
	TonstakeControllerSendRequestLoanMsgOp       MsgOpName = "TonstakeControllerSendRequestLoan"
	WalletPluginDestructMsgOp                    MsgOpName = "WalletPluginDestruct"
	SettleChannelConditionalsMsgOp               MsgOpName = "SettleChannelConditionals"
	TopUpChannelBalanceMsgOp                     MsgOpName = "TopUpChannelBalance"
	GetRoyaltyParamsMsgOp                        MsgOpName = "GetRoyaltyParams"
	SbtRevokeMsgOp                               MsgOpName = "SbtRevoke"
	PaymentRequestMsgOp                          MsgOpName = "PaymentRequest"
	TonstakeControllerPoolUnhaltMsgOp            MsgOpName = "TonstakeControllerPoolUnhalt"
	DedustSwapPeerMsgOp                          MsgOpName = "DedustSwapPeer"
	JettonNotifyMsgOp                            MsgOpName = "JettonNotify"
	SubscriptionPaymentMsgOp                     MsgOpName = "SubscriptionPayment"
	WhalesNominatorsStakeWithdrawDelayedMsgOp    MsgOpName = "WhalesNominatorsStakeWithdrawDelayed"
	MegatonWtonMintMsgOp                         MsgOpName = "MegatonWtonMint"
	ChannelCooperativeCommitMsgOp                MsgOpName = "ChannelCooperativeCommit"
	TonstakeControllerPoolSetSudoerMsgOp         MsgOpName = "TonstakeControllerPoolSetSudoer"
	CloseStorageContractMsgOp                    MsgOpName = "CloseStorageContract"
	AcceptStorageContractMsgOp                   MsgOpName = "AcceptStorageContract"
	TonstakeControllerApproveMsgOp               MsgOpName = "TonstakeControllerApprove"
	WhalesNominatorsDepositMsgOp                 MsgOpName = "WhalesNominatorsDeposit"
	JettonBurnNotificationMsgOp                  MsgOpName = "JettonBurnNotification"
	ReportStaticDataMsgOp                        MsgOpName = "ReportStaticData"
	TonstakeControllerWithdrawValidatorMsgOp     MsgOpName = "TonstakeControllerWithdrawValidator"
	TonstakeControllerPoolUpgradeMsgOp           MsgOpName = "TonstakeControllerPoolUpgrade"
	TonstakePoolPrepareGovernanceMigrationMsgOp  MsgOpName = "TonstakePoolPrepareGovernanceMigration"
	WhalesNominatorsAcceptStakeMsgOp             MsgOpName = "WhalesNominatorsAcceptStake"
	TonstakePoolSetDepositSettingsMsgOp          MsgOpName = "TonstakePoolSetDepositSettings"
	WhalesNominatorsAcceptWithdrawsMsgOp         MsgOpName = "WhalesNominatorsAcceptWithdraws"
	WhalesNominatorsSendStakeMsgOp               MsgOpName = "WhalesNominatorsSendStake"
	TeleitemOkMsgOp                              MsgOpName = "TeleitemOk"
	TeleitemReturnBidMsgOp                       MsgOpName = "TeleitemReturnBid"
	ReportRoyaltyParamsMsgOp                     MsgOpName = "ReportRoyaltyParams"
	StorageRewardWithdrawalMsgOp                 MsgOpName = "StorageRewardWithdrawal"
	DedustPayoutFromPoolMsgOp                    MsgOpName = "DedustPayoutFromPool"
	TonstakeImanagerRequestNotificationMsgOp     MsgOpName = "TonstakeImanagerRequestNotification"
	TonstakePoolDeployControllerMsgOp            MsgOpName = "TonstakePoolDeployController"
	DedustDepositLiquidityAllMsgOp               MsgOpName = "DedustDepositLiquidityAll"
	StorageContractTerminatedMsgOp               MsgOpName = "StorageContractTerminated"
	TonstakeImanagerStatsMsgOp                   MsgOpName = "TonstakeImanagerStats"
	TonstakeImanagerSetInterestMsgOp             MsgOpName = "TonstakeImanagerSetInterest"
	SbtRequestOwnerMsgOp                         MsgOpName = "SbtRequestOwner"
	TonstakeControllerTopUpMsgOp                 MsgOpName = "TonstakeControllerTopUp"
	StorageContractConfirmedMsgOp                MsgOpName = "StorageContractConfirmed"
	ExcessMsgOp                                  MsgOpName = "Excess"
	WhalesNominatorsWithdrawMsgOp                MsgOpName = "WhalesNominatorsWithdraw"
	ChannelClosedMsgOp                           MsgOpName = "ChannelClosed"
	TonstakePoolLoanRepaymentMsgOp               MsgOpName = "TonstakePoolLoanRepayment"
	WalletPluginDestructResponseMsgOp            MsgOpName = "WalletPluginDestructResponse"
	DeployStorageContractMsgOp                   MsgOpName = "DeployStorageContract"
	TonstakePoolRequestLoanMsgOp                 MsgOpName = "TonstakePoolRequestLoan"
	TonstakeControllerDisapproveMsgOp            MsgOpName = "TonstakeControllerDisapprove"
	DedustSwapMsgOp                              MsgOpName = "DedustSwap"
	TonstakeControllerRecoverStakeMsgOp          MsgOpName = "TonstakeControllerRecoverStake"
	TonstakeNftBurnNotificationMsgOp             MsgOpName = "TonstakeNftBurnNotification"
	TonstakeControllerReturnUnusedLoanMsgOp      MsgOpName = "TonstakeControllerReturnUnusedLoan"
	PaymentRequestResponseMsgOp                  MsgOpName = "PaymentRequestResponse"
	TonstakeControllerUpdateValidatorHashMsgOp   MsgOpName = "TonstakeControllerUpdateValidatorHash"
	TonstakeNftBurnMsgOp                         MsgOpName = "TonstakeNftBurn"
	ElectorNewStakeConfirmationMsgOp             MsgOpName = "ElectorNewStakeConfirmation"
	StonfiPaymentRequestMsgOp                    MsgOpName = "StonfiPaymentRequest"
	ElectorRecoverStakeResponseMsgOp             MsgOpName = "ElectorRecoverStakeResponse"
	BounceMsgOp                                  MsgOpName = "Bounce"
)

// MsgOpCode is the first 4 bytes of a message body identifying an operation to be performed.
type MsgOpCode = uint32

const (
	TextCommentMsgOpCode                             MsgOpCode = 0x00000000
	ProveOwnershipMsgOpCode                          MsgOpCode = 0x04ded148
	NftOwnershipAssignedMsgOpCode                    MsgOpCode = 0x05138d91
	OwnershipProofMsgOpCode                          MsgOpCode = 0x0524c7ae
	ChallengeQuarantinedChannelStateMsgOpCode        MsgOpCode = 0x088eaa32
	TonstakePoolWithdrawalMsgOpCode                  MsgOpCode = 0x0a77535c
	SbtOwnerInfoMsgOpCode                            MsgOpCode = 0x0dd607e3
	InitPaymentChannelMsgOpCode                      MsgOpCode = 0x0e0620c2
	JettonTransferMsgOpCode                          MsgOpCode = 0x0f8a7ea5
	OfferStorageContractMsgOpCode                    MsgOpCode = 0x107c49ef
	TonstakeNftInitMsgOpCode                         MsgOpCode = 0x132f9a45
	TonstakeControllerPoolHaltMsgOpCode              MsgOpCode = 0x139a1b4e
	WhalesNominatorsForceKickMsgOpCode               MsgOpCode = 0x1596920c
	TonstakeControllerCreditMsgOpCode                MsgOpCode = 0x1690c604
	JettonInternalTransferMsgOpCode                  MsgOpCode = 0x178d4519
	WhalesNominatorsWithdrawUnownedResponseMsgOpCode MsgOpCode = 0x1d1715bf
	SbtDestroyMsgOpCode                              MsgOpCode = 0x1f04537a
	StartUncooperativeChannelCloseMsgOpCode          MsgOpCode = 0x1f151acf
	EncryptedTextCommentMsgOpCode                    MsgOpCode = 0x2167da4b
	WhalesNominatorsStakeWithdrawCompletedMsgOpCode  MsgOpCode = 0x23d421e1
	WhalesNominatorsWithdrawUnownedMsgOpCode         MsgOpCode = 0x251d6a98
	FinishUncooperativeChannelCloseMsgOpCode         MsgOpCode = 0x25432a91
	StonfiSwapMsgOpCode                              MsgOpCode = 0x25938561
	TonstakeControllerPoolSendMessageMsgOpCode       MsgOpCode = 0x270695fb
	TeleitemDeployMsgOpCode                          MsgOpCode = 0x299a3e15
	TonstakePoolSetGovernanceFeeMsgOpCode            MsgOpCode = 0x2aaa96a0
	GetStaticDataMsgOpCode                           MsgOpCode = 0x2fcb26a2
	TonstakeControllerValidatorWithdrawalMsgOpCode   MsgOpCode = 0x30026327
	TonstakePoolWithdrawMsgOpCode                    MsgOpCode = 0x319b0cdc
	AuctionFillUpMsgOpCode                           MsgOpCode = 0x370fec51
	TeleitemCancelAuctionMsgOpCode                   MsgOpCode = 0x371638ae
	ProofStorageMsgOpCode                            MsgOpCode = 0x419d5d4d
	ProcessGovernanceDecisionMsgOpCode               MsgOpCode = 0x44beae41
	TelemintDeployMsgOpCode                          MsgOpCode = 0x4637289a
	TelemintDeployV2MsgOpCode                        MsgOpCode = 0x4637289b
	StorageWithdrawMsgOpCode                         MsgOpCode = 0x46ed2e94
	DedustPayoutMsgOpCode                            MsgOpCode = 0x474f86cf
	ElectorRecoverStakeRequestMsgOpCode              MsgOpCode = 0x47657424
	TonstakePoolDepositMsgOpCode                     MsgOpCode = 0x47d54391
	TeleitemStartAuctionMsgOpCode                    MsgOpCode = 0x487a8e81
	TonstakePoolTouchMsgOpCode                       MsgOpCode = 0x4bc7c2df
	ElectorNewStakeMsgOpCode                         MsgOpCode = 0x4e73744b
	DeleteDnsRecordMsgOpCode                         MsgOpCode = 0x4eb1f0f9
	ChangeDnsRecordMsgOpCode                         MsgOpCode = 0x4eb1f0f9
	DnsBalanceReleaseMsgOpCode                       MsgOpCode = 0x4ed14b65
	UpdatePubkeyMsgOpCode                            MsgOpCode = 0x53f34cd6
	UpdateStorageParamsMsgOpCode                     MsgOpCode = 0x54cbf19b
	TonstakeImanagerOperationFeeMsgOpCode            MsgOpCode = 0x54d37487
	ChannelCooperativeCloseMsgOpCode                 MsgOpCode = 0x5577587e
	OutbidNotificationMsgOpCode                      MsgOpCode = 0x557cea20
	TonstakeControllerReturnAvailableFundsMsgOpCode  MsgOpCode = 0x55c26cd5
	JettonBurnMsgOpCode                              MsgOpCode = 0x595f07bc
	TonstakePoolSetRolesMsgOpCode                    MsgOpCode = 0x5e517f36
	NftTransferMsgOpCode                             MsgOpCode = 0x5fcc3d14
	DedustSwapExternalMsgOpCode                      MsgOpCode = 0x61ee542d
	TonstakeControllerSendRequestLoanMsgOpCode       MsgOpCode = 0x6335b11a
	WalletPluginDestructMsgOpCode                    MsgOpCode = 0x64737472
	SettleChannelConditionalsMsgOpCode               MsgOpCode = 0x66f6f069
	TopUpChannelBalanceMsgOpCode                     MsgOpCode = 0x67c7d281
	GetRoyaltyParamsMsgOpCode                        MsgOpCode = 0x693d3950
	SbtRevokeMsgOpCode                               MsgOpCode = 0x6f89f5e3
	PaymentRequestMsgOpCode                          MsgOpCode = 0x706c7567
	TonstakeControllerPoolUnhaltMsgOpCode            MsgOpCode = 0x7247e7a5
	DedustSwapPeerMsgOpCode                          MsgOpCode = 0x72aca8aa
	JettonNotifyMsgOpCode                            MsgOpCode = 0x7362d09c
	SubscriptionPaymentMsgOpCode                     MsgOpCode = 0x73756273
	WhalesNominatorsStakeWithdrawDelayedMsgOpCode    MsgOpCode = 0x74bb3427
	MegatonWtonMintMsgOpCode                         MsgOpCode = 0x77a33521
	ChannelCooperativeCommitMsgOpCode                MsgOpCode = 0x79a126ef
	TonstakeControllerPoolSetSudoerMsgOpCode         MsgOpCode = 0x79e7c016
	CloseStorageContractMsgOpCode                    MsgOpCode = 0x79f937ea
	AcceptStorageContractMsgOpCode                   MsgOpCode = 0x7a361688
	TonstakeControllerApproveMsgOpCode               MsgOpCode = 0x7b4b42e6
	WhalesNominatorsDepositMsgOpCode                 MsgOpCode = 0x7bcd1fef
	JettonBurnNotificationMsgOpCode                  MsgOpCode = 0x7bdd97de
	ReportStaticDataMsgOpCode                        MsgOpCode = 0x8b771735
	TonstakeControllerWithdrawValidatorMsgOpCode     MsgOpCode = 0x8efed779
	TonstakeControllerPoolUpgradeMsgOpCode           MsgOpCode = 0x96e7f528
	TonstakePoolPrepareGovernanceMigrationMsgOpCode  MsgOpCode = 0x9971881c
	WhalesNominatorsAcceptStakeMsgOpCode             MsgOpCode = 0x99a811fb
	TonstakePoolSetDepositSettingsMsgOpCode          MsgOpCode = 0x9bf5561c
	WhalesNominatorsAcceptWithdrawsMsgOpCode         MsgOpCode = 0xa19fd934
	WhalesNominatorsSendStakeMsgOpCode               MsgOpCode = 0xa2065f2c
	TeleitemOkMsgOpCode                              MsgOpCode = 0xa37a0983
	TeleitemReturnBidMsgOpCode                       MsgOpCode = 0xa43227e1
	ReportRoyaltyParamsMsgOpCode                     MsgOpCode = 0xa8cb00ad
	StorageRewardWithdrawalMsgOpCode                 MsgOpCode = 0xa91baf56
	DedustPayoutFromPoolMsgOpCode                    MsgOpCode = 0xad4eb6f5
	TonstakeImanagerRequestNotificationMsgOpCode     MsgOpCode = 0xb1ebae06
	TonstakePoolDeployControllerMsgOpCode            MsgOpCode = 0xb27edcad
	DedustDepositLiquidityAllMsgOpCode               MsgOpCode = 0xb56b9598
	StorageContractTerminatedMsgOpCode               MsgOpCode = 0xb6236d63
	TonstakeImanagerStatsMsgOpCode                   MsgOpCode = 0xc1344900
	TonstakeImanagerSetInterestMsgOpCode             MsgOpCode = 0xc9f04485
	SbtRequestOwnerMsgOpCode                         MsgOpCode = 0xd0c3bfea
	TonstakeControllerTopUpMsgOpCode                 MsgOpCode = 0xd372158c
	StorageContractConfirmedMsgOpCode                MsgOpCode = 0xd4caedcd
	ExcessMsgOpCode                                  MsgOpCode = 0xd53276db
	WhalesNominatorsWithdrawMsgOpCode                MsgOpCode = 0xda803efd
	ChannelClosedMsgOpCode                           MsgOpCode = 0xdddc88ba
	TonstakePoolLoanRepaymentMsgOpCode               MsgOpCode = 0xdfdca27b
	WalletPluginDestructResponseMsgOpCode            MsgOpCode = 0xe4737472
	DeployStorageContractMsgOpCode                   MsgOpCode = 0xe4748df1
	TonstakePoolRequestLoanMsgOpCode                 MsgOpCode = 0xe642c965
	TonstakeControllerDisapproveMsgOpCode            MsgOpCode = 0xe8a0abfe
	DedustSwapMsgOpCode                              MsgOpCode = 0xea06185d
	TonstakeControllerRecoverStakeMsgOpCode          MsgOpCode = 0xeb373a05
	TonstakeNftBurnNotificationMsgOpCode             MsgOpCode = 0xed58b0b2
	TonstakeControllerReturnUnusedLoanMsgOpCode      MsgOpCode = 0xed7378a6
	PaymentRequestResponseMsgOpCode                  MsgOpCode = 0xf06c7567
	TonstakeControllerUpdateValidatorHashMsgOpCode   MsgOpCode = 0xf0fd2250
	TonstakeNftBurnMsgOpCode                         MsgOpCode = 0xf127fe4e
	ElectorNewStakeConfirmationMsgOpCode             MsgOpCode = 0xf374484c
	StonfiPaymentRequestMsgOpCode                    MsgOpCode = 0xf93bb43f
	ElectorRecoverStakeResponseMsgOpCode             MsgOpCode = 0xf96f7324
	BounceMsgOpCode                                  MsgOpCode = 0xffffffff
)

var KnownMsgTypes = map[string]any{
	TextCommentMsgOp:                             TextCommentMsgBody{},
	ProveOwnershipMsgOp:                          ProveOwnershipMsgBody{},
	NftOwnershipAssignedMsgOp:                    NftOwnershipAssignedMsgBody{},
	OwnershipProofMsgOp:                          OwnershipProofMsgBody{},
	ChallengeQuarantinedChannelStateMsgOp:        ChallengeQuarantinedChannelStateMsgBody{},
	TonstakePoolWithdrawalMsgOp:                  TonstakePoolWithdrawalMsgBody{},
	SbtOwnerInfoMsgOp:                            SbtOwnerInfoMsgBody{},
	InitPaymentChannelMsgOp:                      InitPaymentChannelMsgBody{},
	JettonTransferMsgOp:                          JettonTransferMsgBody{},
	OfferStorageContractMsgOp:                    OfferStorageContractMsgBody{},
	TonstakeNftInitMsgOp:                         TonstakeNftInitMsgBody{},
	TonstakeControllerPoolHaltMsgOp:              TonstakeControllerPoolHaltMsgBody{},
	WhalesNominatorsForceKickMsgOp:               WhalesNominatorsForceKickMsgBody{},
	TonstakeControllerCreditMsgOp:                TonstakeControllerCreditMsgBody{},
	JettonInternalTransferMsgOp:                  JettonInternalTransferMsgBody{},
	WhalesNominatorsWithdrawUnownedResponseMsgOp: WhalesNominatorsWithdrawUnownedResponseMsgBody{},
	SbtDestroyMsgOp:                              SbtDestroyMsgBody{},
	StartUncooperativeChannelCloseMsgOp:          StartUncooperativeChannelCloseMsgBody{},
	EncryptedTextCommentMsgOp:                    EncryptedTextCommentMsgBody{},
	WhalesNominatorsStakeWithdrawCompletedMsgOp:  WhalesNominatorsStakeWithdrawCompletedMsgBody{},
	WhalesNominatorsWithdrawUnownedMsgOp:         WhalesNominatorsWithdrawUnownedMsgBody{},
	FinishUncooperativeChannelCloseMsgOp:         FinishUncooperativeChannelCloseMsgBody{},
	StonfiSwapMsgOp:                              StonfiSwapMsgBody{},
	TonstakeControllerPoolSendMessageMsgOp:       TonstakeControllerPoolSendMessageMsgBody{},
	TeleitemDeployMsgOp:                          TeleitemDeployMsgBody{},
	TonstakePoolSetGovernanceFeeMsgOp:            TonstakePoolSetGovernanceFeeMsgBody{},
	GetStaticDataMsgOp:                           GetStaticDataMsgBody{},
	TonstakeControllerValidatorWithdrawalMsgOp:   TonstakeControllerValidatorWithdrawalMsgBody{},
	TonstakePoolWithdrawMsgOp:                    TonstakePoolWithdrawMsgBody{},
	AuctionFillUpMsgOp:                           AuctionFillUpMsgBody{},
	TeleitemCancelAuctionMsgOp:                   TeleitemCancelAuctionMsgBody{},
	ProofStorageMsgOp:                            ProofStorageMsgBody{},
	ProcessGovernanceDecisionMsgOp:               ProcessGovernanceDecisionMsgBody{},
	TelemintDeployMsgOp:                          TelemintDeployMsgBody{},
	TelemintDeployV2MsgOp:                        TelemintDeployV2MsgBody{},
	StorageWithdrawMsgOp:                         StorageWithdrawMsgBody{},
	DedustPayoutMsgOp:                            DedustPayoutMsgBody{},
	ElectorRecoverStakeRequestMsgOp:              ElectorRecoverStakeRequestMsgBody{},
	TonstakePoolDepositMsgOp:                     TonstakePoolDepositMsgBody{},
	TeleitemStartAuctionMsgOp:                    TeleitemStartAuctionMsgBody{},
	TonstakePoolTouchMsgOp:                       TonstakePoolTouchMsgBody{},
	ElectorNewStakeMsgOp:                         ElectorNewStakeMsgBody{},
	DeleteDnsRecordMsgOp:                         DeleteDnsRecordMsgBody{},
	ChangeDnsRecordMsgOp:                         ChangeDnsRecordMsgBody{},
	DnsBalanceReleaseMsgOp:                       DnsBalanceReleaseMsgBody{},
	UpdatePubkeyMsgOp:                            UpdatePubkeyMsgBody{},
	UpdateStorageParamsMsgOp:                     UpdateStorageParamsMsgBody{},
	TonstakeImanagerOperationFeeMsgOp:            TonstakeImanagerOperationFeeMsgBody{},
	ChannelCooperativeCloseMsgOp:                 ChannelCooperativeCloseMsgBody{},
	OutbidNotificationMsgOp:                      OutbidNotificationMsgBody{},
	TonstakeControllerReturnAvailableFundsMsgOp:  TonstakeControllerReturnAvailableFundsMsgBody{},
	JettonBurnMsgOp:                              JettonBurnMsgBody{},
	TonstakePoolSetRolesMsgOp:                    TonstakePoolSetRolesMsgBody{},
	NftTransferMsgOp:                             NftTransferMsgBody{},
	DedustSwapExternalMsgOp:                      DedustSwapExternalMsgBody{},
	TonstakeControllerSendRequestLoanMsgOp:       TonstakeControllerSendRequestLoanMsgBody{},
	WalletPluginDestructMsgOp:                    WalletPluginDestructMsgBody{},
	SettleChannelConditionalsMsgOp:               SettleChannelConditionalsMsgBody{},
	TopUpChannelBalanceMsgOp:                     TopUpChannelBalanceMsgBody{},
	GetRoyaltyParamsMsgOp:                        GetRoyaltyParamsMsgBody{},
	SbtRevokeMsgOp:                               SbtRevokeMsgBody{},
	PaymentRequestMsgOp:                          PaymentRequestMsgBody{},
	TonstakeControllerPoolUnhaltMsgOp:            TonstakeControllerPoolUnhaltMsgBody{},
	DedustSwapPeerMsgOp:                          DedustSwapPeerMsgBody{},
	JettonNotifyMsgOp:                            JettonNotifyMsgBody{},
	SubscriptionPaymentMsgOp:                     SubscriptionPaymentMsgBody{},
	WhalesNominatorsStakeWithdrawDelayedMsgOp:    WhalesNominatorsStakeWithdrawDelayedMsgBody{},
	MegatonWtonMintMsgOp:                         MegatonWtonMintMsgBody{},
	ChannelCooperativeCommitMsgOp:                ChannelCooperativeCommitMsgBody{},
	TonstakeControllerPoolSetSudoerMsgOp:         TonstakeControllerPoolSetSudoerMsgBody{},
	CloseStorageContractMsgOp:                    CloseStorageContractMsgBody{},
	AcceptStorageContractMsgOp:                   AcceptStorageContractMsgBody{},
	TonstakeControllerApproveMsgOp:               TonstakeControllerApproveMsgBody{},
	WhalesNominatorsDepositMsgOp:                 WhalesNominatorsDepositMsgBody{},
	JettonBurnNotificationMsgOp:                  JettonBurnNotificationMsgBody{},
	ReportStaticDataMsgOp:                        ReportStaticDataMsgBody{},
	TonstakeControllerWithdrawValidatorMsgOp:     TonstakeControllerWithdrawValidatorMsgBody{},
	TonstakeControllerPoolUpgradeMsgOp:           TonstakeControllerPoolUpgradeMsgBody{},
	TonstakePoolPrepareGovernanceMigrationMsgOp:  TonstakePoolPrepareGovernanceMigrationMsgBody{},
	WhalesNominatorsAcceptStakeMsgOp:             WhalesNominatorsAcceptStakeMsgBody{},
	TonstakePoolSetDepositSettingsMsgOp:          TonstakePoolSetDepositSettingsMsgBody{},
	WhalesNominatorsAcceptWithdrawsMsgOp:         WhalesNominatorsAcceptWithdrawsMsgBody{},
	WhalesNominatorsSendStakeMsgOp:               WhalesNominatorsSendStakeMsgBody{},
	TeleitemOkMsgOp:                              TeleitemOkMsgBody{},
	TeleitemReturnBidMsgOp:                       TeleitemReturnBidMsgBody{},
	ReportRoyaltyParamsMsgOp:                     ReportRoyaltyParamsMsgBody{},
	StorageRewardWithdrawalMsgOp:                 StorageRewardWithdrawalMsgBody{},
	DedustPayoutFromPoolMsgOp:                    DedustPayoutFromPoolMsgBody{},
	TonstakeImanagerRequestNotificationMsgOp:     TonstakeImanagerRequestNotificationMsgBody{},
	TonstakePoolDeployControllerMsgOp:            TonstakePoolDeployControllerMsgBody{},
	DedustDepositLiquidityAllMsgOp:               DedustDepositLiquidityAllMsgBody{},
	StorageContractTerminatedMsgOp:               StorageContractTerminatedMsgBody{},
	TonstakeImanagerStatsMsgOp:                   TonstakeImanagerStatsMsgBody{},
	TonstakeImanagerSetInterestMsgOp:             TonstakeImanagerSetInterestMsgBody{},
	SbtRequestOwnerMsgOp:                         SbtRequestOwnerMsgBody{},
	TonstakeControllerTopUpMsgOp:                 TonstakeControllerTopUpMsgBody{},
	StorageContractConfirmedMsgOp:                StorageContractConfirmedMsgBody{},
	ExcessMsgOp:                                  ExcessMsgBody{},
	WhalesNominatorsWithdrawMsgOp:                WhalesNominatorsWithdrawMsgBody{},
	ChannelClosedMsgOp:                           ChannelClosedMsgBody{},
	TonstakePoolLoanRepaymentMsgOp:               TonstakePoolLoanRepaymentMsgBody{},
	WalletPluginDestructResponseMsgOp:            WalletPluginDestructResponseMsgBody{},
	DeployStorageContractMsgOp:                   DeployStorageContractMsgBody{},
	TonstakePoolRequestLoanMsgOp:                 TonstakePoolRequestLoanMsgBody{},
	TonstakeControllerDisapproveMsgOp:            TonstakeControllerDisapproveMsgBody{},
	DedustSwapMsgOp:                              DedustSwapMsgBody{},
	TonstakeControllerRecoverStakeMsgOp:          TonstakeControllerRecoverStakeMsgBody{},
	TonstakeNftBurnNotificationMsgOp:             TonstakeNftBurnNotificationMsgBody{},
	TonstakeControllerReturnUnusedLoanMsgOp:      TonstakeControllerReturnUnusedLoanMsgBody{},
	PaymentRequestResponseMsgOp:                  PaymentRequestResponseMsgBody{},
	TonstakeControllerUpdateValidatorHashMsgOp:   TonstakeControllerUpdateValidatorHashMsgBody{},
	TonstakeNftBurnMsgOp:                         TonstakeNftBurnMsgBody{},
	ElectorNewStakeConfirmationMsgOp:             ElectorNewStakeConfirmationMsgBody{},
	StonfiPaymentRequestMsgOp:                    StonfiPaymentRequestMsgBody{},
	ElectorRecoverStakeResponseMsgOp:             ElectorRecoverStakeResponseMsgBody{},
	BounceMsgOp:                                  BounceMsgBody{},
}
