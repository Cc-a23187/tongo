
var messagesDecodingFunctions = map[uint32]msgDecoderFunc {
{{- range $tag, $ops := .Operations }}
            {{- if gt (len $ops) 1 }}
            // {{- range $op := $ops}}{{ $op.OperationName }}, {{ end }}
                0x{{ printf "%08x" $tag.Val }}: decodeMultipleMsgs(tlb.Tag{Val:0x{{ printf "%08x" $tag.Val }},Len:{{ $tag.Len }}}, []MsgOpName{ {{- range $op := $ops }} {{ $op.OperationName }}MsgOp,  {{ end }} }, []any{ {{- range $op := $ops }}{{ $op.TypeName }}{}, {{ end }} }),
            {{- else }}
                {{- $op := index $ops 0 }}
                // 0x{{ printf "%08x" $tag.Val }}
                {{ $op.OperationName }}MsgOpCode: decodeMsg(tlb.Tag{Val:0x{{ printf "%08x" $tag.Val }},Len:{{ $tag.Len }}}, {{ $op.OperationName }}MsgOp, {{ $op.TypeName }}{}),
            {{- end }}
        {{- end }}
}


const (
{{- range  $tag, $ops := .Operations }}
    {{- range $op := $ops}}
       {{ $op.OperationName }}MsgOp MsgOpName = "{{ $op.OperationName }}"
    {{- end }}
{{- end }}
)

const (
{{- range  $tag, $ops := .Operations }}
    {{- range $op := $ops}}
       {{ $op.OperationName }}MsgOpCode MsgOpCode = 0x{{ printf "%08x" $op.Tag }}
   {{- end }}
{{- end }}
)

var KnownMsgTypes = map[string]any{
{{- range  $tag, $ops := .Operations }}
    {{- range $op := $ops}}
       {{ $op.OperationName }}MsgOp: {{ $op.TypeName }}{},
    {{- end }}
{{- end }}
}