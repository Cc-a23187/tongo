package abi

// Code autogenerated. DO NOT EDIT.

import (
	"errors"
	"github.com/tonkeeper/tongo/boc"
	"github.com/tonkeeper/tongo/tlb"
)

func (j *JettonPayload) UnmarshalTLB(cell *boc.Cell, decoder *tlb.Decoder) error {
	if cell.BitsAvailableForRead() == 0 && cell.RefsAvailableForRead() == 0 {
		return nil
	}
	tempCell := cell.CopyRemaining()
	op64, err := tempCell.ReadUint(32)
	if errors.Is(err, boc.ErrNotEnoughBits) {
		j.SumType = UnknownJettonOp
		j.Value = cell.CopyRemaining()
		return nil
	}
	op := uint32(op64)
	j.OpCode = &op
	switch op {
	case TextCommentJettonOpCode: // 0x00000000
		var res TextCommentJettonPayload
		if err := tlb.Unmarshal(tempCell, &res); err == nil {
			j.SumType = TextCommentJettonOp
			j.Value = res
			return nil
		}
	case StonfiSwapJettonOpCode: // 0x25938561
		var res StonfiSwapJettonPayload
		if err := tlb.Unmarshal(tempCell, &res); err == nil {
			j.SumType = StonfiSwapJettonOp
			j.Value = res
			return nil
		}

	}
	j.SumType = UnknownJettonOp
	j.Value = cell.CopyRemaining()

	return nil
}

const (
	TextCommentJettonOp JettonOpName = "TextComment"
	StonfiSwapJettonOp  JettonOpName = "StonfiSwap"

	TextCommentJettonOpCode JettonOpCode = 0x00000000
	StonfiSwapJettonOpCode  JettonOpCode = 0x25938561
)

var KnownJettonTypes = map[string]any{
	TextCommentJettonOp: TextCommentJettonPayload{},
	StonfiSwapJettonOp:  StonfiSwapJettonPayload{},
}
var jettonOpCodes = map[JettonOpName]JettonOpCode{
	TextCommentJettonOp: TextCommentJettonOpCode,
	StonfiSwapJettonOp:  StonfiSwapJettonOpCode,
}

type TextCommentJettonPayload struct {
	Text tlb.Text
}

type StonfiSwapJettonPayload struct {
	TokenWallet     tlb.MsgAddress
	MinOut          tlb.VarUInteger16
	ToAddress       tlb.MsgAddress
	ReferralAddress tlb.Maybe[tlb.MsgAddress]
}
